{"ast":null,"code":"var _jsxFileName = \"/Users/hyemin/Documents/Projects/cloud-native-blog/frontend/src/components/CommentSection.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CommentSection = ({\n  postId,\n  user\n}) => {\n  _s();\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const userId = (user === null || user === void 0 ? void 0 : user.userId) || null;\n  const fetchComments = useCallback(async () => {\n    try {\n      const response = await fetch(`http://localhost:5000/api/comments/${postId}?userId=${userId}`);\n      const data = await response.json();\n      const processedComments = data.map(comment => ({\n        ...comment,\n        likedUsers: Array.isArray(comment.likedUsers) ? comment.likedUsers : [],\n        isLikedByCurrentUser: comment.isLikedByCurrentUser,\n        likeCount: comment.likeCount || 0,\n        username: comment.user.username,\n        replies: Array.isArray(comment.replies) ? comment.replies.map(reply => ({\n          ...reply,\n          likedUsers: Array.isArray(reply.likedUsers) ? reply.likedUsers : [],\n          isLikedByCurrentUser: reply.isLikedByCurrentUser,\n          likeCount: reply.likeCount || 0,\n          username: reply.username\n        })) : []\n      }));\n      setComments(processedComments);\n    } catch (error) {\n      console.error('Error fetching comments:', error);\n    }\n  }, [postId, userId]);\n  const handleDelete = async commentId => {\n    try {\n      const response = await fetch(`http://localhost:5000/api/comments/${commentId}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId\n        })\n      });\n      if (response.ok) {\n        setComments(prevComments => prevComments.filter(comment => comment.id !== commentId));\n      } else {\n        console.error('Failed to delete the comment');\n      }\n    } catch (error) {\n      console.error('Error deleting comment:', error);\n    }\n  };\n  useEffect(() => {\n    fetchComments();\n    socket.emit('joinPost', postId);\n    socket.on('newComment', comment => {\n      setComments(prevComments => {\n        // If the comment already exists (by id or tempId), don't add it\n        const commentExists = prevComments.some(c => c.id === comment.id || c.id === comment.tempId);\n        if (commentExists) {\n          return prevComments.map(c => c.id === comment.tempId || c.id === comment.id ? {\n            ...comment,\n            id: comment.id\n          } : c);\n        }\n\n        // Handle new reply\n        if (comment.parentId) {\n          return prevComments.map(parentComment => parentComment.id === comment.parentId ? {\n            ...parentComment,\n            replies: [...parentComment.replies, comment]\n          } : parentComment);\n        }\n\n        // Handle new root-level comment\n        return [...prevComments, comment];\n      });\n    });\n    socket.on('updateLike', updatedComment => {\n      setComments(prevComments => {\n        return prevComments.map(comment => {\n          if (comment.id === updatedComment.commentId) {\n            var _updatedComment$likeC;\n            return {\n              ...comment,\n              likeCount: (_updatedComment$likeC = updatedComment.likeCount) !== null && _updatedComment$likeC !== void 0 ? _updatedComment$likeC : 0,\n              isLikedByCurrentUser: updatedComment.isLikedByCurrentUser\n            };\n          }\n          const updatedReplies = comment.replies.map(reply => {\n            var _updatedComment$likeC2;\n            return reply.id === updatedComment.commentId ? {\n              ...reply,\n              likeCount: (_updatedComment$likeC2 = updatedComment.likeCount) !== null && _updatedComment$likeC2 !== void 0 ? _updatedComment$likeC2 : 0,\n              isLikedByCurrentUser: updatedComment.isLikedByCurrentUser\n            } : reply;\n          });\n          return {\n            ...comment,\n            replies: updatedReplies\n          };\n        });\n      });\n    });\n    return () => {\n      socket.emit('leavePost', postId);\n      socket.off('newComment');\n      socket.off('updateLike');\n    };\n  }, [postId, userId, fetchComments]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comment-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: comments.length > 0 ? comments.map(comment => /*#__PURE__*/_jsxDEV(CommentItem, {\n        comment: comment,\n        onReply: handleReply,\n        onLike: handleLike,\n        onDelete: handleDelete,\n        user: user\n      }, comment.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No comments available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => handleCommentSubmit(e),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newComment,\n        onChange: e => setNewComment(e.target.value),\n        placeholder: \"Write a comment...\",\n        disabled: !userId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: !userId,\n        children: \"Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(CommentSection, \"/ZSbLriEjDAF35QUbH+wKEvEjYM=\");\n_c = CommentSection;\nexport default CommentSection;\nvar _c;\n$RefreshReg$(_c, \"CommentSection\");","map":{"version":3,"names":["CommentSection","postId","user","_s","comments","setComments","useState","newComment","setNewComment","userId","fetchComments","useCallback","response","fetch","data","json","processedComments","map","comment","likedUsers","Array","isArray","isLikedByCurrentUser","likeCount","username","replies","reply","error","console","handleDelete","commentId","method","headers","body","JSON","stringify","ok","prevComments","filter","id","useEffect","socket","emit","on","commentExists","some","c","tempId","parentId","parentComment","updatedComment","_updatedComment$likeC","updatedReplies","_updatedComment$likeC2","off","_jsxDEV","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","CommentItem","onReply","handleReply","onLike","handleLike","onDelete","onSubmit","e","handleCommentSubmit","type","value","onChange","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["/Users/hyemin/Documents/Projects/cloud-native-blog/frontend/src/components/CommentSection.js"],"sourcesContent":["const CommentSection = ({ postId, user }) => {\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const userId = user?.userId || null;\n\n  const fetchComments = useCallback(async () => {\n    try {\n      const response = await fetch(`http://localhost:5000/api/comments/${postId}?userId=${userId}`);\n      const data = await response.json();\n    \n      const processedComments = data.map(comment => ({\n        ...comment,\n        likedUsers: Array.isArray(comment.likedUsers) ? comment.likedUsers : [],\n        isLikedByCurrentUser: comment.isLikedByCurrentUser,\n        likeCount: comment.likeCount || 0,\n        username: comment.user.username,\n        replies: Array.isArray(comment.replies) ? comment.replies.map(reply => ({\n          ...reply,\n          likedUsers: Array.isArray(reply.likedUsers) ? reply.likedUsers : [],\n          isLikedByCurrentUser: reply.isLikedByCurrentUser,\n          likeCount: reply.likeCount || 0,\n          username: reply.username\n        })) : []\n      }));\n      setComments(processedComments);\n    } catch (error) {\n      console.error('Error fetching comments:', error);\n    }\n  }, [postId, userId]);\n\n  const handleDelete = async (commentId) => {\n    try {\n      const response = await fetch(`http://localhost:5000/api/comments/${commentId}`, {\n        method: 'DELETE',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ userId })\n      });\n\n      if (response.ok) {\n        setComments(prevComments => prevComments.filter(comment => comment.id !== commentId));\n      } else {\n        console.error('Failed to delete the comment');\n      }\n    } catch (error) {\n      console.error('Error deleting comment:', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchComments();\n  \n    socket.emit('joinPost', postId);\n  \n    socket.on('newComment', (comment) => {\n      setComments((prevComments) => {\n        // If the comment already exists (by id or tempId), don't add it\n        const commentExists = prevComments.some(c => c.id === comment.id || c.id === comment.tempId);\n        if (commentExists) {\n          return prevComments.map(c => \n            (c.id === comment.tempId || c.id === comment.id) ? { ...comment, id: comment.id } : c\n          );\n        }\n\n        // Handle new reply\n        if (comment.parentId) {\n          return prevComments.map(parentComment =>\n            parentComment.id === comment.parentId\n              ? { ...parentComment, replies: [...parentComment.replies, comment] }\n              : parentComment\n          );\n        }\n\n        // Handle new root-level comment\n        return [...prevComments, comment];\n      });\n    });\n  \n    socket.on('updateLike', (updatedComment) => {\n      setComments((prevComments) => {\n        return prevComments.map((comment) => {\n          if (comment.id === updatedComment.commentId) {\n            return { ...comment, likeCount: updatedComment.likeCount ?? 0, isLikedByCurrentUser: updatedComment.isLikedByCurrentUser };\n          }\n    \n          const updatedReplies = comment.replies.map((reply) =>\n            reply.id === updatedComment.commentId \n              ? { ...reply, likeCount: updatedComment.likeCount ?? 0, isLikedByCurrentUser: updatedComment.isLikedByCurrentUser } \n              : reply\n          );\n          return { ...comment, replies: updatedReplies };\n        });\n      });\n    });\n    \n    return () => {\n      socket.emit('leavePost', postId);\n      socket.off('newComment');\n      socket.off('updateLike');\n    };\n  }, [postId, userId, fetchComments]);\n\n  return (\n    <div className=\"comment-section\">\n      <h2>Comments</h2>\n      <ul>\n        {comments.length > 0 ? (\n          comments.map((comment) => (\n            <CommentItem\n              key={comment.id}\n              comment={comment}\n              onReply={handleReply}\n              onLike={handleLike}\n              onDelete={handleDelete}\n              user={user}\n            />\n          ))\n        ) : (\n          <p>No comments available.</p>\n        )}\n      </ul>\n      <form onSubmit={(e) => handleCommentSubmit(e)}>\n        <input\n          type=\"text\"\n          value={newComment}\n          onChange={(e) => setNewComment(e.target.value)}\n          placeholder=\"Write a comment...\"\n          disabled={!userId}\n        />\n        <button type=\"submit\" disabled={!userId}>Post</button>\n      </form>\n    </div>\n  );\n};\n\nexport default CommentSection;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}