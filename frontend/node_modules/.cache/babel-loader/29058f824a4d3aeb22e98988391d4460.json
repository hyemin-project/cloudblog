{"ast":null,"code":"var _jsxFileName = \"/Users/hyemin/Documents/Projects/cloud-native-blog/frontend/src/components/CommentSection.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport CommentItem from './CommentItem'; // Ensure this is the correct path to your CommentItem component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CommentSection = ({\n  postId,\n  user\n}) => {\n  _s();\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  useEffect(() => {\n    // Fetch comments from the backend when the component mounts\n    const fetchComments = async () => {\n      try {\n        const response = await fetch(`/api/comments/${postId}`);\n        const data = await response.json();\n        setComments(data);\n      } catch (error) {\n        console.error('Error fetching comments:', error);\n      }\n    };\n    fetchComments();\n  }, [postId]);\n  const handleLike = async commentId => {\n    if (!user) {\n      alert('Please log in to like a comment.');\n      return;\n    }\n    try {\n      await fetch(`/api/comments/like`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify({\n          commentId\n        })\n      });\n      setComments(prevComments => prevComments.map(comment => comment.id === commentId ? {\n        ...comment,\n        likes: comment.likes + 1\n      } : comment));\n    } catch (error) {\n      console.error('Error liking comment:', error);\n    }\n  };\n  const handleReply = async (parentId, replyText) => {\n    if (!user) {\n      alert('Please log in to reply to a comment.');\n      return;\n    }\n    try {\n      const response = await fetch(`/api/comments`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify({\n          postId,\n          content: replyText,\n          parentId\n        })\n      });\n      const newReply = await response.json();\n      setComments(prevComments => prevComments.map(comment => comment.id === parentId ? {\n        ...comment,\n        replies: [...comment.replies, newReply]\n      } : comment));\n    } catch (error) {\n      console.error('Error replying to comment:', error);\n    }\n  };\n  const handleCommentSubmit = async e => {\n    e.preventDefault();\n    if (!newComment.trim()) return;\n    if (!user) {\n      alert('Please log in to post a comment.');\n      return;\n    }\n    try {\n      const response = await fetch(`/api/comments`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify({\n          postId,\n          content: newComment\n        })\n      });\n      const newCommentData = await response.json();\n      setComments([...comments, newCommentData]);\n      setNewComment('');\n    } catch (error) {\n      console.error('Error creating comment:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comment-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: comments.map(comment => /*#__PURE__*/_jsxDEV(CommentItem, {\n        comment: comment,\n        onReply: handleReply,\n        onLike: handleLike,\n        user: user\n      }, comment.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleCommentSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newComment,\n        onChange: e => setNewComment(e.target.value),\n        placeholder: \"Write a comment...\",\n        disabled: !user // Disable the input if the user is not logged in\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: !user,\n        children: \"Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), !user && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please log in to post a comment.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s(CommentSection, \"MxCDS9ewhkO9e8lz5YjyzEXdntQ=\");\n_c = CommentSection;\nexport default CommentSection;\nvar _c;\n$RefreshReg$(_c, \"CommentSection\");","map":{"version":3,"names":["React","useState","useEffect","CommentItem","jsxDEV","_jsxDEV","CommentSection","postId","user","_s","comments","setComments","newComment","setNewComment","fetchComments","response","fetch","data","json","error","console","handleLike","commentId","alert","method","headers","Authorization","localStorage","getItem","body","JSON","stringify","prevComments","map","comment","id","likes","handleReply","parentId","replyText","content","newReply","replies","handleCommentSubmit","e","preventDefault","trim","newCommentData","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onReply","onLike","onSubmit","type","value","onChange","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["/Users/hyemin/Documents/Projects/cloud-native-blog/frontend/src/components/CommentSection.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport CommentItem from './CommentItem'; // Ensure this is the correct path to your CommentItem component\n\nconst CommentSection = ({ postId, user }) => {\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n\n  useEffect(() => {\n    // Fetch comments from the backend when the component mounts\n    const fetchComments = async () => {\n      try {\n        const response = await fetch(`/api/comments/${postId}`);\n        const data = await response.json();\n        setComments(data);\n      } catch (error) {\n        console.error('Error fetching comments:', error);\n      }\n    };\n\n    fetchComments();\n  }, [postId]);\n\n  const handleLike = async (commentId) => {\n    if (!user) {\n      alert('Please log in to like a comment.');\n      return;\n    }\n    \n    try {\n      await fetch(`/api/comments/like`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\n        },\n        body: JSON.stringify({ commentId }),\n      });\n\n      setComments((prevComments) =>\n        prevComments.map((comment) =>\n          comment.id === commentId\n            ? { ...comment, likes: comment.likes + 1 }\n            : comment\n        )\n      );\n    } catch (error) {\n      console.error('Error liking comment:', error);\n    }\n  };\n\n  const handleReply = async (parentId, replyText) => {\n    if (!user) {\n      alert('Please log in to reply to a comment.');\n      return;\n    }\n\n    try {\n      const response = await fetch(`/api/comments`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\n        },\n        body: JSON.stringify({ postId, content: replyText, parentId }),\n      });\n\n      const newReply = await response.json();\n\n      setComments((prevComments) =>\n        prevComments.map((comment) =>\n          comment.id === parentId\n            ? { ...comment, replies: [...comment.replies, newReply] }\n            : comment\n        )\n      );\n    } catch (error) {\n      console.error('Error replying to comment:', error);\n    }\n  };\n\n  const handleCommentSubmit = async (e) => {\n    e.preventDefault();\n    if (!newComment.trim()) return;\n\n    if (!user) {\n      alert('Please log in to post a comment.');\n      return;\n    }\n\n    try {\n      const response = await fetch(`/api/comments`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\n        },\n        body: JSON.stringify({ postId, content: newComment }),\n      });\n\n      const newCommentData = await response.json();\n\n      setComments([...comments, newCommentData]);\n      setNewComment('');\n    } catch (error) {\n      console.error('Error creating comment:', error);\n    }\n  };\n\n  return (\n    <div className=\"comment-section\">\n      <h2>Comments</h2>\n      <ul>\n        {comments.map((comment) => (\n          <CommentItem\n            key={comment.id}\n            comment={comment}\n            onReply={handleReply}\n            onLike={handleLike}\n            user={user}\n          />\n        ))}\n      </ul>\n      <form onSubmit={handleCommentSubmit}>\n        <input\n          type=\"text\"\n          value={newComment}\n          onChange={(e) => setNewComment(e.target.value)}\n          placeholder=\"Write a comment...\"\n          disabled={!user} // Disable the input if the user is not logged in\n        />\n        <button type=\"submit\" disabled={!user}>Post</button>\n      </form>\n      {!user && <p>Please log in to post a comment.</p>}\n    </div>\n  );\n};\n\nexport default CommentSection;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}