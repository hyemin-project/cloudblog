{"ast":null,"code":"var _jsxFileName = \"/Users/hyemin/Documents/Projects/cloud-native-blog/frontend/src/components/CommentSection.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport CommentItem from './CommentItem';\nimport './css/Comment.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000');\nconst CommentSection = ({\n  postId,\n  user\n}) => {\n  _s();\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const userId = (user === null || user === void 0 ? void 0 : user.userId) || null;\n  useEffect(() => {\n    const fetchComments = async () => {\n      try {\n        const response = await fetch(`http://localhost:5000/api/comments/${postId}?userId=${userId}`);\n        const data = await response.json();\n        const processedComments = data.map(comment => ({\n          ...comment,\n          likedUsers: Array.isArray(comment.likedUsers) ? comment.likedUsers : [],\n          isLikedByCurrentUser: comment.isLikedByCurrentUser,\n          likeCount: comment.likeCount || 0,\n          username: comment.user.username,\n          replies: Array.isArray(comment.replies) ? comment.replies.map(reply => ({\n            ...reply,\n            likedUsers: Array.isArray(reply.likedUsers) ? reply.likedUsers : [],\n            isLikedByCurrentUser: reply.isLikedByCurrentUser,\n            likeCount: reply.likeCount || 0,\n            username: reply.username\n          })) : []\n        }));\n        setComments(processedComments);\n      } catch (error) {\n        console.error('Error fetching comments:', error);\n      }\n    };\n    fetchComments();\n    socket.emit('joinPost', postId);\n    socket.on('newComment', comment => {\n      setComments(prevComments => {\n        // Check if the comment already exists\n        const commentExists = prevComments.some(c => c.id === comment.id);\n        if (commentExists) {\n          return prevComments;\n        }\n\n        // Replace temporary comment with the real one if tempId exists\n        if (comment.tempId) {\n          return prevComments.map(c => c.id === comment.tempId ? {\n            ...comment,\n            id: comment.id\n          } : c);\n        }\n\n        // Handle new reply\n        if (comment.parentId) {\n          return prevComments.map(parentComment => parentComment.id === comment.parentId ? {\n            ...parentComment,\n            replies: [...parentComment.replies, comment]\n          } : parentComment);\n        }\n\n        // Handle new root-level comment\n        return [...prevComments, comment];\n      });\n    });\n    socket.on('updateLike', updatedComment => {\n      setComments(prevComments => {\n        return prevComments.map(comment => {\n          if (comment.id === updatedComment.commentId) {\n            var _updatedComment$likeC;\n            return {\n              ...comment,\n              likeCount: (_updatedComment$likeC = updatedComment.likeCount) !== null && _updatedComment$likeC !== void 0 ? _updatedComment$likeC : 0,\n              isLikedByCurrentUser: updatedComment.isLikedByCurrentUser\n            };\n          }\n          const updatedReplies = comment.replies.map(reply => {\n            var _updatedComment$likeC2;\n            return reply.id === updatedComment.commentId ? {\n              ...reply,\n              likeCount: (_updatedComment$likeC2 = updatedComment.likeCount) !== null && _updatedComment$likeC2 !== void 0 ? _updatedComment$likeC2 : 0,\n              isLikedByCurrentUser: updatedComment.isLikedByCurrentUser\n            } : reply;\n          });\n          return {\n            ...comment,\n            replies: updatedReplies\n          };\n        });\n      });\n    });\n    return () => {\n      socket.emit('leavePost', postId);\n      socket.off('newComment');\n      socket.off('updateLike');\n    };\n  }, [postId, userId]);\n  const handleCommentSubmit = (e, parentId = null) => {\n    e.preventDefault();\n    if (newComment.trim()) {\n      const tempId = 'temp-' + Math.random().toString(36).substr(2, 9);\n      const newCommentData = {\n        id: tempId,\n        content: newComment,\n        userId,\n        username: user.username,\n        likeCount: 0,\n        likedUsers: [],\n        isLikedByCurrentUser: false,\n        replies: [],\n        createdAt: new Date().toISOString()\n      };\n      setComments(prevComments => parentId ? prevComments.map(comment => comment.id === parentId ? {\n        ...comment,\n        replies: [...comment.replies, newCommentData]\n      } : comment) : [...prevComments, newCommentData]);\n      socket.emit('createComment', {\n        postId,\n        content: newComment,\n        parentId: parentId || null,\n        userId,\n        tempId\n      });\n      setNewComment('');\n    }\n  };\n  const handleReply = (parentId, replyText) => {\n    handleCommentSubmit({\n      preventDefault: () => {}\n    }, parentId);\n  };\n  const handleLike = (commentId, isLiked) => {\n    if (!userId) {\n      alert('Please log in to like a comment.');\n      return;\n    }\n    socket.emit('likeComment', {\n      commentId,\n      isLiked,\n      userId\n    });\n    setComments(prevComments => prevComments.map(comment => {\n      if (comment.id === commentId) {\n        return {\n          ...comment,\n          likeCount: isLiked ? comment.likeCount - 1 : comment.likeCount + 1,\n          isLikedByCurrentUser: !isLiked\n        };\n      }\n      const updatedReplies = comment.replies.map(reply => reply.id === commentId ? {\n        ...reply,\n        likeCount: isLiked ? reply.likeCount - 1 : reply.likeCount + 1,\n        isLikedByCurrentUser: !isLiked\n      } : reply);\n      return {\n        ...comment,\n        replies: updatedReplies\n      };\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comment-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: comments.length > 0 ? comments.map(comment => /*#__PURE__*/_jsxDEV(CommentItem, {\n        comment: comment,\n        onReply: handleReply,\n        onLike: handleLike,\n        user: user\n      }, comment.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No comments available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => handleCommentSubmit(e),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newComment,\n        onChange: e => setNewComment(e.target.value),\n        placeholder: \"Write a comment...\",\n        disabled: !userId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: !userId,\n        children: \"Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 5\n  }, this);\n};\n_s(CommentSection, \"MxCDS9ewhkO9e8lz5YjyzEXdntQ=\");\n_c = CommentSection;\nexport default CommentSection;\nvar _c;\n$RefreshReg$(_c, \"CommentSection\");","map":{"version":3,"names":["React","useState","useEffect","io","CommentItem","jsxDEV","_jsxDEV","socket","CommentSection","postId","user","_s","comments","setComments","newComment","setNewComment","userId","fetchComments","response","fetch","data","json","processedComments","map","comment","likedUsers","Array","isArray","isLikedByCurrentUser","likeCount","username","replies","reply","error","console","emit","on","prevComments","commentExists","some","c","id","tempId","parentId","parentComment","updatedComment","commentId","_updatedComment$likeC","updatedReplies","_updatedComment$likeC2","off","handleCommentSubmit","e","preventDefault","trim","Math","random","toString","substr","newCommentData","content","createdAt","Date","toISOString","handleReply","replyText","handleLike","isLiked","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","onReply","onLike","onSubmit","type","value","onChange","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["/Users/hyemin/Documents/Projects/cloud-native-blog/frontend/src/components/CommentSection.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport CommentItem from './CommentItem';\nimport './css/Comment.css';\n\nconst socket = io('http://localhost:5000');\n\nconst CommentSection = ({ postId, user }) => {\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const userId = user?.userId || null;\n\n  useEffect(() => {\n    const fetchComments = async () => {\n      try {\n        const response = await fetch(`http://localhost:5000/api/comments/${postId}?userId=${userId}`);\n        const data = await response.json();\n    \n        const processedComments = data.map(comment => ({\n          ...comment,\n          likedUsers: Array.isArray(comment.likedUsers) ? comment.likedUsers : [],\n          isLikedByCurrentUser: comment.isLikedByCurrentUser,\n          likeCount: comment.likeCount || 0,\n          username: comment.user.username,\n          replies: Array.isArray(comment.replies) ? comment.replies.map(reply => ({\n            ...reply,\n            likedUsers: Array.isArray(reply.likedUsers) ? reply.likedUsers : [],\n            isLikedByCurrentUser: reply.isLikedByCurrentUser,\n            likeCount: reply.likeCount || 0,\n            username: reply.username\n          })) : []\n        }));\n        setComments(processedComments);\n      } catch (error) {\n        console.error('Error fetching comments:', error);\n      }\n    };\n\n    fetchComments();\n  \n    socket.emit('joinPost', postId);\n  \n    socket.on('newComment', (comment) => {\n      setComments((prevComments) => {\n        // Check if the comment already exists\n        const commentExists = prevComments.some(c => c.id === comment.id);\n        if (commentExists) {\n          return prevComments;\n        }\n\n        // Replace temporary comment with the real one if tempId exists\n        if (comment.tempId) {\n          return prevComments.map(c => \n            c.id === comment.tempId ? { ...comment, id: comment.id } : c\n          );\n        }\n\n        // Handle new reply\n        if (comment.parentId) {\n          return prevComments.map(parentComment =>\n            parentComment.id === comment.parentId\n              ? { ...parentComment, replies: [...parentComment.replies, comment] }\n              : parentComment\n          );\n        }\n\n        // Handle new root-level comment\n        return [...prevComments, comment];\n      });\n    });\n  \n    socket.on('updateLike', (updatedComment) => {\n      setComments((prevComments) => {\n        return prevComments.map((comment) => {\n          if (comment.id === updatedComment.commentId) {\n            return { ...comment, likeCount: updatedComment.likeCount ?? 0, isLikedByCurrentUser: updatedComment.isLikedByCurrentUser };\n          }\n    \n          const updatedReplies = comment.replies.map((reply) =>\n            reply.id === updatedComment.commentId \n              ? { ...reply, likeCount: updatedComment.likeCount ?? 0, isLikedByCurrentUser: updatedComment.isLikedByCurrentUser } \n              : reply\n          );\n          return { ...comment, replies: updatedReplies };\n        });\n      });\n    });\n    \n    return () => {\n      socket.emit('leavePost', postId);\n      socket.off('newComment');\n      socket.off('updateLike');\n    };\n  }, [postId, userId]);\n\n  const handleCommentSubmit = (e, parentId = null) => {\n    e.preventDefault();\n    \n    if (newComment.trim()) {\n      const tempId = 'temp-' + Math.random().toString(36).substr(2, 9);\n\n      const newCommentData = {\n        id: tempId,\n        content: newComment,\n        userId,\n        username: user.username,\n        likeCount: 0,\n        likedUsers: [],\n        isLikedByCurrentUser: false,\n        replies: [],\n        createdAt: new Date().toISOString(),\n      };\n\n      setComments(prevComments => \n        parentId\n          ? prevComments.map(comment => \n              comment.id === parentId\n                ? { ...comment, replies: [...comment.replies, newCommentData] }\n                : comment\n            )\n          : [...prevComments, newCommentData]\n      );\n\n      socket.emit('createComment', {\n        postId,\n        content: newComment,\n        parentId: parentId || null,\n        userId,\n        tempId\n      });\n\n      setNewComment('');\n    }\n  };\n\n  const handleReply = (parentId, replyText) => {\n    handleCommentSubmit({ preventDefault: () => {} }, parentId);\n  };\n\n  const handleLike = (commentId, isLiked) => {\n    if (!userId) {\n      alert('Please log in to like a comment.');\n      return;\n    }\n\n    socket.emit('likeComment', { commentId, isLiked, userId });\n\n    setComments((prevComments) =>\n      prevComments.map((comment) => {\n        if (comment.id === commentId) {\n          return {\n            ...comment,\n            likeCount: isLiked ? comment.likeCount - 1 : comment.likeCount + 1,\n            isLikedByCurrentUser: !isLiked\n          };\n        }\n\n        const updatedReplies = comment.replies.map((reply) =>\n          reply.id === commentId\n            ? {\n                ...reply,\n                likeCount: isLiked ? reply.likeCount - 1 : reply.likeCount + 1,\n                isLikedByCurrentUser: !isLiked\n              }\n            : reply\n        );\n        return { ...comment, replies: updatedReplies };\n      })\n    );\n  };\n\n  return (\n    <div className=\"comment-section\">\n      <h2>Comments</h2>\n      <ul>\n        {comments.length > 0 ? (\n          comments.map((comment) => (\n            <CommentItem\n              key={comment.id}\n              comment={comment}\n              onReply={handleReply}\n              onLike={handleLike}\n              user={user}\n            />\n          ))\n        ) : (\n          <p>No comments available.</p>\n        )}\n      </ul>\n      <form onSubmit={(e) => handleCommentSubmit(e)}>\n        <input\n          type=\"text\"\n          value={newComment}\n          onChange={(e) => setNewComment(e.target.value)}\n          placeholder=\"Write a comment...\"\n          disabled={!userId}\n        />\n        <button type=\"submit\" disabled={!userId}>Post</button>\n      </form>\n    </div>\n  );\n};\n\nexport default CommentSection;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,EAAE,MAAM,kBAAkB;AACjC,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,MAAM,GAAGJ,EAAE,CAAC,uBAAuB,CAAC;AAE1C,MAAMK,cAAc,GAAGA,CAAC;EAAEC,MAAM;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAC3C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACa,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAMe,MAAM,GAAG,CAAAN,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEM,MAAM,KAAI,IAAI;EAEnCd,SAAS,CAAC,MAAM;IACd,MAAMe,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsCV,MAAM,WAAWO,MAAM,EAAE,CAAC;QAC7F,MAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAElC,MAAMC,iBAAiB,GAAGF,IAAI,CAACG,GAAG,CAACC,OAAO,KAAK;UAC7C,GAAGA,OAAO;UACVC,UAAU,EAAEC,KAAK,CAACC,OAAO,CAACH,OAAO,CAACC,UAAU,CAAC,GAAGD,OAAO,CAACC,UAAU,GAAG,EAAE;UACvEG,oBAAoB,EAAEJ,OAAO,CAACI,oBAAoB;UAClDC,SAAS,EAAEL,OAAO,CAACK,SAAS,IAAI,CAAC;UACjCC,QAAQ,EAAEN,OAAO,CAACd,IAAI,CAACoB,QAAQ;UAC/BC,OAAO,EAAEL,KAAK,CAACC,OAAO,CAACH,OAAO,CAACO,OAAO,CAAC,GAAGP,OAAO,CAACO,OAAO,CAACR,GAAG,CAACS,KAAK,KAAK;YACtE,GAAGA,KAAK;YACRP,UAAU,EAAEC,KAAK,CAACC,OAAO,CAACK,KAAK,CAACP,UAAU,CAAC,GAAGO,KAAK,CAACP,UAAU,GAAG,EAAE;YACnEG,oBAAoB,EAAEI,KAAK,CAACJ,oBAAoB;YAChDC,SAAS,EAAEG,KAAK,CAACH,SAAS,IAAI,CAAC;YAC/BC,QAAQ,EAAEE,KAAK,CAACF;UAClB,CAAC,CAAC,CAAC,GAAG;QACR,CAAC,CAAC,CAAC;QACHjB,WAAW,CAACS,iBAAiB,CAAC;MAChC,CAAC,CAAC,OAAOW,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF,CAAC;IAEDhB,aAAa,CAAC,CAAC;IAEfV,MAAM,CAAC4B,IAAI,CAAC,UAAU,EAAE1B,MAAM,CAAC;IAE/BF,MAAM,CAAC6B,EAAE,CAAC,YAAY,EAAGZ,OAAO,IAAK;MACnCX,WAAW,CAAEwB,YAAY,IAAK;QAC5B;QACA,MAAMC,aAAa,GAAGD,YAAY,CAACE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKjB,OAAO,CAACiB,EAAE,CAAC;QACjE,IAAIH,aAAa,EAAE;UACjB,OAAOD,YAAY;QACrB;;QAEA;QACA,IAAIb,OAAO,CAACkB,MAAM,EAAE;UAClB,OAAOL,YAAY,CAACd,GAAG,CAACiB,CAAC,IACvBA,CAAC,CAACC,EAAE,KAAKjB,OAAO,CAACkB,MAAM,GAAG;YAAE,GAAGlB,OAAO;YAAEiB,EAAE,EAAEjB,OAAO,CAACiB;UAAG,CAAC,GAAGD,CAC7D,CAAC;QACH;;QAEA;QACA,IAAIhB,OAAO,CAACmB,QAAQ,EAAE;UACpB,OAAON,YAAY,CAACd,GAAG,CAACqB,aAAa,IACnCA,aAAa,CAACH,EAAE,KAAKjB,OAAO,CAACmB,QAAQ,GACjC;YAAE,GAAGC,aAAa;YAAEb,OAAO,EAAE,CAAC,GAAGa,aAAa,CAACb,OAAO,EAAEP,OAAO;UAAE,CAAC,GAClEoB,aACN,CAAC;QACH;;QAEA;QACA,OAAO,CAAC,GAAGP,YAAY,EAAEb,OAAO,CAAC;MACnC,CAAC,CAAC;IACJ,CAAC,CAAC;IAEFjB,MAAM,CAAC6B,EAAE,CAAC,YAAY,EAAGS,cAAc,IAAK;MAC1ChC,WAAW,CAAEwB,YAAY,IAAK;QAC5B,OAAOA,YAAY,CAACd,GAAG,CAAEC,OAAO,IAAK;UACnC,IAAIA,OAAO,CAACiB,EAAE,KAAKI,cAAc,CAACC,SAAS,EAAE;YAAA,IAAAC,qBAAA;YAC3C,OAAO;cAAE,GAAGvB,OAAO;cAAEK,SAAS,GAAAkB,qBAAA,GAAEF,cAAc,CAAChB,SAAS,cAAAkB,qBAAA,cAAAA,qBAAA,GAAI,CAAC;cAAEnB,oBAAoB,EAAEiB,cAAc,CAACjB;YAAqB,CAAC;UAC5H;UAEA,MAAMoB,cAAc,GAAGxB,OAAO,CAACO,OAAO,CAACR,GAAG,CAAES,KAAK;YAAA,IAAAiB,sBAAA;YAAA,OAC/CjB,KAAK,CAACS,EAAE,KAAKI,cAAc,CAACC,SAAS,GACjC;cAAE,GAAGd,KAAK;cAAEH,SAAS,GAAAoB,sBAAA,GAAEJ,cAAc,CAAChB,SAAS,cAAAoB,sBAAA,cAAAA,sBAAA,GAAI,CAAC;cAAErB,oBAAoB,EAAEiB,cAAc,CAACjB;YAAqB,CAAC,GACjHI,KAAK;UAAA,CACX,CAAC;UACD,OAAO;YAAE,GAAGR,OAAO;YAAEO,OAAO,EAAEiB;UAAe,CAAC;QAChD,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF,OAAO,MAAM;MACXzC,MAAM,CAAC4B,IAAI,CAAC,WAAW,EAAE1B,MAAM,CAAC;MAChCF,MAAM,CAAC2C,GAAG,CAAC,YAAY,CAAC;MACxB3C,MAAM,CAAC2C,GAAG,CAAC,YAAY,CAAC;IAC1B,CAAC;EACH,CAAC,EAAE,CAACzC,MAAM,EAAEO,MAAM,CAAC,CAAC;EAEpB,MAAMmC,mBAAmB,GAAGA,CAACC,CAAC,EAAET,QAAQ,GAAG,IAAI,KAAK;IAClDS,CAAC,CAACC,cAAc,CAAC,CAAC;IAElB,IAAIvC,UAAU,CAACwC,IAAI,CAAC,CAAC,EAAE;MACrB,MAAMZ,MAAM,GAAG,OAAO,GAAGa,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;MAEhE,MAAMC,cAAc,GAAG;QACrBlB,EAAE,EAAEC,MAAM;QACVkB,OAAO,EAAE9C,UAAU;QACnBE,MAAM;QACNc,QAAQ,EAAEpB,IAAI,CAACoB,QAAQ;QACvBD,SAAS,EAAE,CAAC;QACZJ,UAAU,EAAE,EAAE;QACdG,oBAAoB,EAAE,KAAK;QAC3BG,OAAO,EAAE,EAAE;QACX8B,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC;MAEDlD,WAAW,CAACwB,YAAY,IACtBM,QAAQ,GACJN,YAAY,CAACd,GAAG,CAACC,OAAO,IACtBA,OAAO,CAACiB,EAAE,KAAKE,QAAQ,GACnB;QAAE,GAAGnB,OAAO;QAAEO,OAAO,EAAE,CAAC,GAAGP,OAAO,CAACO,OAAO,EAAE4B,cAAc;MAAE,CAAC,GAC7DnC,OACN,CAAC,GACD,CAAC,GAAGa,YAAY,EAAEsB,cAAc,CACtC,CAAC;MAEDpD,MAAM,CAAC4B,IAAI,CAAC,eAAe,EAAE;QAC3B1B,MAAM;QACNmD,OAAO,EAAE9C,UAAU;QACnB6B,QAAQ,EAAEA,QAAQ,IAAI,IAAI;QAC1B3B,MAAM;QACN0B;MACF,CAAC,CAAC;MAEF3B,aAAa,CAAC,EAAE,CAAC;IACnB;EACF,CAAC;EAED,MAAMiD,WAAW,GAAGA,CAACrB,QAAQ,EAAEsB,SAAS,KAAK;IAC3Cd,mBAAmB,CAAC;MAAEE,cAAc,EAAEA,CAAA,KAAM,CAAC;IAAE,CAAC,EAAEV,QAAQ,CAAC;EAC7D,CAAC;EAED,MAAMuB,UAAU,GAAGA,CAACpB,SAAS,EAAEqB,OAAO,KAAK;IACzC,IAAI,CAACnD,MAAM,EAAE;MACXoD,KAAK,CAAC,kCAAkC,CAAC;MACzC;IACF;IAEA7D,MAAM,CAAC4B,IAAI,CAAC,aAAa,EAAE;MAAEW,SAAS;MAAEqB,OAAO;MAAEnD;IAAO,CAAC,CAAC;IAE1DH,WAAW,CAAEwB,YAAY,IACvBA,YAAY,CAACd,GAAG,CAAEC,OAAO,IAAK;MAC5B,IAAIA,OAAO,CAACiB,EAAE,KAAKK,SAAS,EAAE;QAC5B,OAAO;UACL,GAAGtB,OAAO;UACVK,SAAS,EAAEsC,OAAO,GAAG3C,OAAO,CAACK,SAAS,GAAG,CAAC,GAAGL,OAAO,CAACK,SAAS,GAAG,CAAC;UAClED,oBAAoB,EAAE,CAACuC;QACzB,CAAC;MACH;MAEA,MAAMnB,cAAc,GAAGxB,OAAO,CAACO,OAAO,CAACR,GAAG,CAAES,KAAK,IAC/CA,KAAK,CAACS,EAAE,KAAKK,SAAS,GAClB;QACE,GAAGd,KAAK;QACRH,SAAS,EAAEsC,OAAO,GAAGnC,KAAK,CAACH,SAAS,GAAG,CAAC,GAAGG,KAAK,CAACH,SAAS,GAAG,CAAC;QAC9DD,oBAAoB,EAAE,CAACuC;MACzB,CAAC,GACDnC,KACN,CAAC;MACD,OAAO;QAAE,GAAGR,OAAO;QAAEO,OAAO,EAAEiB;MAAe,CAAC;IAChD,CAAC,CACH,CAAC;EACH,CAAC;EAED,oBACE1C,OAAA;IAAK+D,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC9BhE,OAAA;MAAAgE,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjBpE,OAAA;MAAAgE,QAAA,EACG1D,QAAQ,CAAC+D,MAAM,GAAG,CAAC,GAClB/D,QAAQ,CAACW,GAAG,CAAEC,OAAO,iBACnBlB,OAAA,CAACF,WAAW;QAEVoB,OAAO,EAAEA,OAAQ;QACjBoD,OAAO,EAAEZ,WAAY;QACrBa,MAAM,EAAEX,UAAW;QACnBxD,IAAI,EAAEA;MAAK,GAJNc,OAAO,CAACiB,EAAE;QAAA8B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKhB,CACF,CAAC,gBAEFpE,OAAA;QAAAgE,QAAA,EAAG;MAAsB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAC7B;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACLpE,OAAA;MAAMwE,QAAQ,EAAG1B,CAAC,IAAKD,mBAAmB,CAACC,CAAC,CAAE;MAAAkB,QAAA,gBAC5ChE,OAAA;QACEyE,IAAI,EAAC,MAAM;QACXC,KAAK,EAAElE,UAAW;QAClBmE,QAAQ,EAAG7B,CAAC,IAAKrC,aAAa,CAACqC,CAAC,CAAC8B,MAAM,CAACF,KAAK,CAAE;QAC/CG,WAAW,EAAC,oBAAoB;QAChCC,QAAQ,EAAE,CAACpE;MAAO;QAAAuD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnB,CAAC,eACFpE,OAAA;QAAQyE,IAAI,EAAC,QAAQ;QAACK,QAAQ,EAAE,CAACpE,MAAO;QAAAsD,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV,CAAC;AAAC/D,EAAA,CAlMIH,cAAc;AAAA6E,EAAA,GAAd7E,cAAc;AAoMpB,eAAeA,cAAc;AAAC,IAAA6E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}