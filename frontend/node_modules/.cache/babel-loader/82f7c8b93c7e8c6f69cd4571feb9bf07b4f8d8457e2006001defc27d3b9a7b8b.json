{"ast":null,"code":"var _jsxFileName = \"/Users/hyemin/Documents/Projects/cloud-native-blog/frontend/src/components/CommentSection.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport io from 'socket.io-client';\nimport CommentItem from './CommentItem';\nimport './css/Comment.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000');\nconst CommentSection = ({\n  postId,\n  user\n}) => {\n  _s();\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const userId = (user === null || user === void 0 ? void 0 : user.userId) || null;\n  const username = (user === null || user === void 0 ? void 0 : user.username) || 'Anonymous';\n\n  // Fetch comments from the server\n  const fetchComments = useCallback(async () => {\n    try {\n      const response = await fetch(`http://localhost:5000/api/comments/${postId}?userId=${userId}`);\n      const data = await response.json();\n      const processedComments = data.map(comment => {\n        var _comment$user;\n        return {\n          ...comment,\n          likedUsers: Array.isArray(comment.likedUsers) ? comment.likedUsers : [],\n          isLikedByCurrentUser: comment.isLikedByCurrentUser,\n          likeCount: comment.likeCount || 0,\n          username: ((_comment$user = comment.user) === null || _comment$user === void 0 ? void 0 : _comment$user.username) || 'Anonymous',\n          replies: Array.isArray(comment.replies) ? comment.replies.map(reply => ({\n            ...reply,\n            likedUsers: Array.isArray(reply.likedUsers) ? reply.likedUsers : [],\n            isLikedByCurrentUser: reply.isLikedByCurrentUser,\n            likeCount: reply.likeCount || 0,\n            username: reply.username || 'Anonymous'\n          })) : []\n        };\n      });\n      setComments(processedComments);\n    } catch (error) {\n      console.error('Error fetching comments:', error);\n    }\n  }, [postId, userId]);\n\n  // Handle the deletion of a comment\n  const handleDelete = async commentId => {\n    console.log(`Attempting to delete comment with ID: ${commentId}`);\n    try {\n      const response = await fetch(`http://localhost:5000/api/comments/${commentId}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId\n        })\n      });\n      if (response.ok) {\n        setComments(prevComments => prevComments.filter(comment => comment.id !== commentId));\n      } else {\n        console.error('Failed to delete the comment');\n      }\n    } catch (error) {\n      console.error('Error deleting comment:', error);\n    }\n  };\n\n  // Handle editing of a comment\n  const handleEdit = async (commentId, newContent) => {\n    try {\n      const response = await fetch(`http://localhost:5000/api/comments/${commentId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          content: newContent,\n          userId\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to edit comment');\n      }\n      const result = await response.json();\n      console.log(result.message);\n\n      // Update the comments state with the edited comment\n      setComments(prevComments => prevComments.map(comment => {\n        if (comment.id === commentId) {\n          return {\n            ...comment,\n            content: newContent\n          };\n        }\n        if (comment.replies) {\n          const updatedReplies = comment.replies.map(reply => reply.id === commentId ? {\n            ...reply,\n            content: newContent\n          } : reply);\n          return {\n            ...comment,\n            replies: updatedReplies\n          };\n        }\n        return comment;\n      }));\n    } catch (error) {\n      console.error('Error editing comment:', error);\n    }\n  };\n  const handleCommentSubmit = (e, parentId = null) => {\n    e.preventDefault();\n    if (newComment.trim() && userId) {\n      const tempId = 'temp-' + Math.random().toString(36).substr(2, 9);\n      const newCommentData = {\n        id: tempId,\n        content: newComment,\n        userId,\n        username,\n        likeCount: 0,\n        likedUsers: [],\n        isLikedByCurrentUser: false,\n        replies: [],\n        createdAt: new Date().toISOString(),\n        parentId\n      };\n      setComments(prevComments => {\n        if (parentId) {\n          return prevComments.map(comment => comment.id === parentId ? {\n            ...comment,\n            replies: [...comment.replies, newCommentData]\n          } : comment);\n        } else {\n          return [...prevComments, newCommentData];\n        }\n      });\n      socket.emit('createComment', {\n        postId,\n        content: newComment,\n        parentId,\n        userId,\n        username,\n        tempId\n      });\n      setNewComment('');\n    } else if (!userId) {\n      alert('Please log in to comment.');\n    }\n  };\n  const handleReply = (parentId, replyText) => {\n    handleCommentSubmit({\n      preventDefault: () => {}\n    }, parentId);\n  };\n\n  // Handle likes for comments and replies\n  const handleLike = (commentId, isLiked) => {\n    if (!userId) {\n      alert('Please log in to like a comment.');\n      return;\n    }\n    socket.emit('likeComment', {\n      commentId,\n      isLiked,\n      userId\n    });\n    setComments(prevComments => prevComments.map(comment => {\n      if (comment.id === commentId) {\n        return {\n          ...comment,\n          likeCount: isLiked ? comment.likeCount - 1 : comment.likeCount + 1,\n          isLikedByCurrentUser: !isLiked\n        };\n      }\n      const updatedReplies = comment.replies.map(reply => reply.id === commentId ? {\n        ...reply,\n        likeCount: isLiked ? reply.likeCount - 1 : reply.likeCount + 1,\n        isLikedByCurrentUser: !isLiked\n      } : reply);\n      return {\n        ...comment,\n        replies: updatedReplies\n      };\n    }));\n  };\n\n  // Handle incoming socket events for new comments, likes, and edits\n  useEffect(() => {\n    fetchComments();\n    socket.emit('joinPost', postId);\n    socket.on('newComment', comment => {\n      setComments(prevComments => {\n        const commentExists = prevComments.some(c => c.id === comment.id || c.id === comment.tempId);\n        if (commentExists) {\n          return prevComments.map(c => c.id === comment.tempId || c.id === comment.id ? {\n            ...comment,\n            id: comment.id\n          } : c);\n        }\n        if (comment.parentId) {\n          return prevComments.map(parentComment => parentComment.id === comment.parentId ? {\n            ...parentComment,\n            replies: [...parentComment.replies, comment]\n          } : parentComment);\n        }\n        return [...prevComments, comment];\n      });\n    });\n    socket.on('updateLike', updatedComment => {\n      setComments(prevComments => {\n        return prevComments.map(comment => {\n          if (comment.id === updatedComment.commentId) {\n            var _updatedComment$likeC;\n            return {\n              ...comment,\n              likeCount: (_updatedComment$likeC = updatedComment.likeCount) !== null && _updatedComment$likeC !== void 0 ? _updatedComment$likeC : 0,\n              isLikedByCurrentUser: updatedComment.isLikedByCurrentUser\n            };\n          }\n          const updatedReplies = comment.replies.map(reply => {\n            var _updatedComment$likeC2;\n            return reply.id === updatedComment.commentId ? {\n              ...reply,\n              likeCount: (_updatedComment$likeC2 = updatedComment.likeCount) !== null && _updatedComment$likeC2 !== void 0 ? _updatedComment$likeC2 : 0,\n              isLikedByCurrentUser: updatedComment.isLikedByCurrentUser\n            } : reply;\n          });\n          return {\n            ...comment,\n            replies: updatedReplies\n          };\n        });\n      });\n    });\n    socket.on('editComment', editedComment => {\n      setComments(prevComments => prevComments.map(comment => {\n        if (comment.id === editedComment.id) {\n          return {\n            ...comment,\n            ...editedComment\n          };\n        }\n        if (comment.replies) {\n          const updatedReplies = comment.replies.map(reply => reply.id === editedComment.id ? {\n            ...reply,\n            ...editedComment\n          } : reply);\n          return {\n            ...comment,\n            replies: updatedReplies\n          };\n        }\n        return comment;\n      }));\n    });\n    return () => {\n      socket.emit('leavePost', postId);\n      socket.off('newComment');\n      socket.off('updateLike');\n      socket.off('editComment');\n    };\n  }, [postId, userId, fetchComments]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comment-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: comments.length > 0 ? comments.map(comment => /*#__PURE__*/_jsxDEV(CommentItem, {\n        comment: comment,\n        onReply: handleReply,\n        onLike: handleLike,\n        onDelete: handleDelete,\n        onEdit: handleEdit,\n        user: user\n      }, comment.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No comments available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => handleCommentSubmit(e),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newComment,\n        onChange: e => setNewComment(e.target.value),\n        placeholder: \"Write a comment...\",\n        disabled: !userId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: !userId,\n        children: \"Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 251,\n    columnNumber: 5\n  }, this);\n};\n_s(CommentSection, \"/ZSbLriEjDAF35QUbH+wKEvEjYM=\");\n_c = CommentSection;\nexport default CommentSection;\nvar _c;\n$RefreshReg$(_c, \"CommentSection\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","io","CommentItem","jsxDEV","_jsxDEV","socket","CommentSection","postId","user","_s","comments","setComments","newComment","setNewComment","userId","username","fetchComments","response","fetch","data","json","processedComments","map","comment","_comment$user","likedUsers","Array","isArray","isLikedByCurrentUser","likeCount","replies","reply","error","console","handleDelete","commentId","log","method","headers","body","JSON","stringify","ok","prevComments","filter","id","handleEdit","newContent","content","Error","result","message","updatedReplies","handleCommentSubmit","e","parentId","preventDefault","trim","tempId","Math","random","toString","substr","newCommentData","createdAt","Date","toISOString","emit","alert","handleReply","replyText","handleLike","isLiked","on","commentExists","some","c","parentComment","updatedComment","_updatedComment$likeC","_updatedComment$likeC2","editedComment","off","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","onReply","onLike","onDelete","onEdit","onSubmit","type","value","onChange","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["/Users/hyemin/Documents/Projects/cloud-native-blog/frontend/src/components/CommentSection.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport io from 'socket.io-client';\nimport CommentItem from './CommentItem';\nimport './css/Comment.css';\n\nconst socket = io('http://localhost:5000');\n\nconst CommentSection = ({ postId, user }) => {\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const userId = user?.userId || null;\n  const username = user?.username || 'Anonymous';\n\n  // Fetch comments from the server\n  const fetchComments = useCallback(async () => {\n    try {\n      const response = await fetch(`http://localhost:5000/api/comments/${postId}?userId=${userId}`);\n      const data = await response.json();\n    \n      const processedComments = data.map(comment => ({\n        ...comment,\n        likedUsers: Array.isArray(comment.likedUsers) ? comment.likedUsers : [],\n        isLikedByCurrentUser: comment.isLikedByCurrentUser,\n        likeCount: comment.likeCount || 0,\n        username: comment.user?.username || 'Anonymous',\n        replies: Array.isArray(comment.replies) ? comment.replies.map(reply => ({\n          ...reply,\n          likedUsers: Array.isArray(reply.likedUsers) ? reply.likedUsers : [],\n          isLikedByCurrentUser: reply.isLikedByCurrentUser,\n          likeCount: reply.likeCount || 0,\n          username: reply.username || 'Anonymous'\n        })) : []\n      }));\n      setComments(processedComments);\n    } catch (error) {\n      console.error('Error fetching comments:', error);\n    }\n  }, [postId, userId]);\n\n  // Handle the deletion of a comment\n  const handleDelete = async (commentId) => {\n    console.log(`Attempting to delete comment with ID: ${commentId}`);\n    try {\n      const response = await fetch(`http://localhost:5000/api/comments/${commentId}`, {\n        method: 'DELETE',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ userId })\n      });\n  \n      if (response.ok) {\n        setComments(prevComments => prevComments.filter(comment => comment.id !== commentId));\n      } else {\n        console.error('Failed to delete the comment');\n      }\n    } catch (error) {\n      console.error('Error deleting comment:', error);\n    }\n  };\n\n  // Handle editing of a comment\n  const handleEdit = async (commentId, newContent) => {\n    try {\n      const response = await fetch(`http://localhost:5000/api/comments/${commentId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ content: newContent, userId }),\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to edit comment');\n      }\n      \n      const result = await response.json();\n      console.log(result.message);\n\n      // Update the comments state with the edited comment\n      setComments(prevComments => \n        prevComments.map(comment => {\n          if (comment.id === commentId) {\n            return { ...comment, content: newContent };\n          }\n          if (comment.replies) {\n            const updatedReplies = comment.replies.map(reply => \n              reply.id === commentId ? { ...reply, content: newContent } : reply\n            );\n            return { ...comment, replies: updatedReplies };\n          }\n          return comment;\n        })\n      );\n    } catch (error) {\n      console.error('Error editing comment:', error);\n    }\n  };\n\n  const handleCommentSubmit = (e, parentId = null) => {\n    e.preventDefault();\n    \n    if (newComment.trim() && userId) {\n      const tempId = 'temp-' + Math.random().toString(36).substr(2, 9);\n\n      const newCommentData = {\n        id: tempId,\n        content: newComment,\n        userId,\n        username,\n        likeCount: 0,\n        likedUsers: [],\n        isLikedByCurrentUser: false,\n        replies: [],\n        createdAt: new Date().toISOString(),\n        parentId\n      };\n\n      setComments((prevComments) => {\n        if (parentId) {\n          return prevComments.map(comment => \n            comment.id === parentId\n              ? { ...comment, replies: [...comment.replies, newCommentData] }\n              : comment\n          );\n        } else {\n          return [...prevComments, newCommentData];\n        }\n      });\n\n      socket.emit('createComment', {\n        postId,\n        content: newComment,\n        parentId,\n        userId,\n        username,\n        tempId\n      });\n\n      setNewComment('');\n    } else if (!userId) {\n      alert('Please log in to comment.');\n    }\n  };\n\n  const handleReply = (parentId, replyText) => {\n    handleCommentSubmit({ preventDefault: () => {} }, parentId);\n  };\n\n  // Handle likes for comments and replies\n  const handleLike = (commentId, isLiked) => {\n    if (!userId) {\n      alert('Please log in to like a comment.');\n      return;\n    }\n\n    socket.emit('likeComment', { commentId, isLiked, userId });\n\n    setComments((prevComments) =>\n      prevComments.map((comment) => {\n        if (comment.id === commentId) {\n          return {\n            ...comment,\n            likeCount: isLiked ? comment.likeCount - 1 : comment.likeCount + 1,\n            isLikedByCurrentUser: !isLiked\n          };\n        }\n\n        const updatedReplies = comment.replies.map((reply) =>\n          reply.id === commentId\n            ? {\n                ...reply,\n                likeCount: isLiked ? reply.likeCount - 1 : reply.likeCount + 1,\n                isLikedByCurrentUser: !isLiked\n              }\n            : reply\n        );\n        return { ...comment, replies: updatedReplies };\n      })\n    );\n  };\n\n  // Handle incoming socket events for new comments, likes, and edits\n  useEffect(() => {\n    fetchComments();\n  \n    socket.emit('joinPost', postId);\n  \n    socket.on('newComment', (comment) => {\n      setComments((prevComments) => {\n        const commentExists = prevComments.some(c => c.id === comment.id || c.id === comment.tempId);\n        if (commentExists) {\n          return prevComments.map(c => \n            (c.id === comment.tempId || c.id === comment.id) ? { ...comment, id: comment.id } : c\n          );\n        }\n\n        if (comment.parentId) {\n          return prevComments.map(parentComment =>\n            parentComment.id === comment.parentId\n              ? { ...parentComment, replies: [...parentComment.replies, comment] }\n              : parentComment\n          );\n        }\n\n        return [...prevComments, comment];\n      });\n    });\n  \n    socket.on('updateLike', (updatedComment) => {\n      setComments((prevComments) => {\n        return prevComments.map((comment) => {\n          if (comment.id === updatedComment.commentId) {\n            return { ...comment, likeCount: updatedComment.likeCount ?? 0, isLikedByCurrentUser: updatedComment.isLikedByCurrentUser };\n          }\n    \n          const updatedReplies = comment.replies.map((reply) =>\n            reply.id === updatedComment.commentId \n              ? { ...reply, likeCount: updatedComment.likeCount ?? 0, isLikedByCurrentUser: updatedComment.isLikedByCurrentUser } \n              : reply\n          );\n          return { ...comment, replies: updatedReplies };\n        });\n      });\n    });\n\n    socket.on('editComment', (editedComment) => {\n      setComments(prevComments => \n        prevComments.map(comment => {\n          if (comment.id === editedComment.id) {\n            return { ...comment, ...editedComment };\n          }\n          if (comment.replies) {\n            const updatedReplies = comment.replies.map(reply => \n              reply.id === editedComment.id ? { ...reply, ...editedComment } : reply\n            );\n            return { ...comment, replies: updatedReplies };\n          }\n          return comment;\n        })\n      );\n    });\n    \n    return () => {\n      socket.emit('leavePost', postId);\n      socket.off('newComment');\n      socket.off('updateLike');\n      socket.off('editComment');\n    };\n  }, [postId, userId, fetchComments]);\n\n  return (\n    <div className=\"comment-section\">\n      <h2>Comments</h2>\n      <ul>\n        {comments.length > 0 ? (\n          comments.map((comment) => (\n            <CommentItem\n              key={comment.id}\n              comment={comment}\n              onReply={handleReply}\n              onLike={handleLike}\n              onDelete={handleDelete}\n              onEdit={handleEdit}\n              user={user}\n            />\n          ))\n        ) : (\n          <p>No comments available.</p>\n        )}\n      </ul>\n      <form onSubmit={(e) => handleCommentSubmit(e)}>\n        <input\n          type=\"text\"\n          value={newComment}\n          onChange={(e) => setNewComment(e.target.value)}\n          placeholder=\"Write a comment...\"\n          disabled={!userId}\n        />\n        <button type=\"submit\" disabled={!userId}>Post</button>\n      </form>\n    </div>\n  );\n};\n\nexport default CommentSection;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}