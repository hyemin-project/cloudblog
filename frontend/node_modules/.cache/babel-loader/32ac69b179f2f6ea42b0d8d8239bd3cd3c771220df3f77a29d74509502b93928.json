{"ast":null,"code":"var _jsxFileName = \"/Users/hyemin/Documents/Projects/cloud-native-blog/frontend/src/components/CommentSection.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport io from 'socket.io-client';\nimport CommentItem from './CommentItem';\nimport './css/Comment.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CommentSection = ({\n  postId,\n  user\n}) => {\n  _s();\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const userId = (user === null || user === void 0 ? void 0 : user.userId) || null;\n  const username = (user === null || user === void 0 ? void 0 : user.username) || 'Anonymous';\n  const socketRef = useRef();\n  const fetchComments = useCallback(async () => {\n    try {\n      const response = await fetch(`http://localhost:5000/api/comments/${postId}?userId=${userId}`);\n      const data = await response.json();\n      setComments(data);\n    } catch (error) {\n      console.error('Error fetching comments:', error);\n    }\n  }, [postId, userId]);\n  const handleDelete = async commentId => {\n    console.log(`Attempting to delete comment with ID: ${commentId}`);\n    try {\n      const response = await fetch(`http://localhost:5000/api/comments/${commentId}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId\n        })\n      });\n      if (response.ok) {\n        setComments(prevComments => prevComments.filter(comment => comment.id !== commentId));\n      } else {\n        console.error('Failed to delete the comment');\n      }\n    } catch (error) {\n      console.error('Error deleting comment:', error);\n    }\n  };\n  const handleEdit = async (commentId, newContent) => {\n    try {\n      const response = await fetch(`http://localhost:5000/api/comments/${commentId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          content: newContent,\n          userId\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to edit comment');\n      }\n      const result = await response.json();\n      console.log(result.message);\n      setComments(prevComments => prevComments.map(comment => {\n        if (comment.id === commentId) {\n          return {\n            ...comment,\n            content: newContent\n          };\n        }\n        if (comment.replies) {\n          const updatedReplies = comment.replies.map(reply => reply.id === commentId ? {\n            ...reply,\n            content: newContent\n          } : reply);\n          return {\n            ...comment,\n            replies: updatedReplies\n          };\n        }\n        return comment;\n      }));\n    } catch (error) {\n      console.error('Error editing comment:', error);\n    }\n  };\n  const handleCommentSubmit = (e, parentId = null, replyText = null) => {\n    e.preventDefault();\n    const commentContent = replyText || newComment;\n    if (commentContent.trim() && userId) {\n      const tempId = 'temp-' + Math.random().toString(36).substr(2, 9);\n      console.log('Submitting comment:', {\n        postId,\n        content: commentContent,\n        parentId,\n        userId,\n        username,\n        tempId\n      });\n      socketRef.current.emit('createComment', {\n        postId,\n        content: commentContent,\n        parentId,\n        userId,\n        username,\n        tempId\n      });\n      if (!replyText) {\n        setNewComment('');\n      }\n    } else if (!userId) {\n      alert('Please log in to comment.');\n    }\n  };\n  const handleReply = (parentId, replyText) => {\n    handleCommentSubmit({\n      preventDefault: () => {}\n    }, parentId, replyText);\n  };\n  const handleLike = (commentId, isLiked) => {\n    if (!userId) {\n      alert('Please log in to like a comment.');\n      return;\n    }\n    socketRef.current.emit('likeComment', {\n      commentId,\n      isLiked,\n      userId\n    });\n    setComments(prevComments => prevComments.map(comment => {\n      if (comment.id === commentId) {\n        return {\n          ...comment,\n          likeCount: isLiked ? comment.likeCount - 1 : comment.likeCount + 1,\n          isLikedByCurrentUser: !isLiked\n        };\n      }\n      const updatedReplies = comment.replies.map(reply => reply.id === commentId ? {\n        ...reply,\n        likeCount: isLiked ? reply.likeCount - 1 : reply.likeCount + 1,\n        isLikedByCurrentUser: !isLiked\n      } : reply);\n      return {\n        ...comment,\n        replies: updatedReplies\n      };\n    }));\n  };\n  useEffect(() => {\n    fetchComments();\n    socketRef.current = io('http://localhost:5000');\n    socketRef.current.emit('joinPost', postId);\n    const handleNewComment = comment => {\n      console.log('Received new comment:', comment);\n      setComments(prevComments => {\n        const commentExists = prevComments.some(c => c.id === comment.id || c.id === comment.tempId);\n        if (commentExists) {\n          return prevComments.map(c => c.id === comment.tempId || c.id === comment.id ? {\n            ...comment,\n            id: comment.id\n          } : c);\n        }\n        if (comment.parentId) {\n          return prevComments.map(parentComment => parentComment.id === comment.parentId ? {\n            ...parentComment,\n            replies: [...(parentComment.replies || []), comment]\n          } : parentComment);\n        }\n        return [...prevComments, comment];\n      });\n    };\n    const handleUpdateLike = updatedComment => {\n      setComments(prevComments => {\n        return prevComments.map(comment => {\n          if (comment.id === updatedComment.commentId) {\n            var _updatedComment$likeC;\n            return {\n              ...comment,\n              likeCount: (_updatedComment$likeC = updatedComment.likeCount) !== null && _updatedComment$likeC !== void 0 ? _updatedComment$likeC : 0,\n              isLikedByCurrentUser: updatedComment.isLikedByCurrentUser\n            };\n          }\n          const updatedReplies = comment.replies.map(reply => {\n            var _updatedComment$likeC2;\n            return reply.id === updatedComment.commentId ? {\n              ...reply,\n              likeCount: (_updatedComment$likeC2 = updatedComment.likeCount) !== null && _updatedComment$likeC2 !== void 0 ? _updatedComment$likeC2 : 0,\n              isLikedByCurrentUser: updatedComment.isLikedByCurrentUser\n            } : reply;\n          });\n          return {\n            ...comment,\n            replies: updatedReplies\n          };\n        });\n      });\n    };\n    const handleEditComment = editedComment => {\n      setComments(prevComments => prevComments.map(comment => {\n        if (comment.id === editedComment.id) {\n          return {\n            ...comment,\n            ...editedComment\n          };\n        }\n        if (comment.replies) {\n          const updatedReplies = comment.replies.map(reply => reply.id === editedComment.id ? {\n            ...reply,\n            ...editedComment\n          } : reply);\n          return {\n            ...comment,\n            replies: updatedReplies\n          };\n        }\n        return comment;\n      }));\n    };\n    socketRef.current.on('newComment', handleNewComment);\n    socketRef.current.on('updateLike', handleUpdateLike);\n    socketRef.current.on('editComment', handleEditComment);\n    return () => {\n      socketRef.current.emit('leavePost', postId);\n      socketRef.current.off('newComment', handleNewComment);\n      socketRef.current.off('updateLike', handleUpdateLike);\n      socketRef.current.off('editComment', handleEditComment);\n      socketRef.current.disconnect();\n    };\n  }, [postId, userId, fetchComments]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comment-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: comments.length > 0 ? comments.map(comment => /*#__PURE__*/_jsxDEV(CommentItem, {\n        comment: comment,\n        onReply: handleReply,\n        onLike: handleLike,\n        onDelete: handleDelete,\n        onEdit: handleEdit,\n        user: user\n      }, comment.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No comments available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => handleCommentSubmit(e),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newComment,\n        onChange: e => setNewComment(e.target.value),\n        placeholder: \"Write a comment...\",\n        disabled: !userId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: !userId,\n        children: \"Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 217,\n    columnNumber: 5\n  }, this);\n};\n_s(CommentSection, \"JBFR762SBpfHaORsoAjNVk1LRT0=\");\n_c = CommentSection;\nexport default CommentSection;\nvar _c;\n$RefreshReg$(_c, \"CommentSection\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","io","CommentItem","jsxDEV","_jsxDEV","CommentSection","postId","user","_s","comments","setComments","newComment","setNewComment","userId","username","socketRef","fetchComments","response","fetch","data","json","error","console","handleDelete","commentId","log","method","headers","body","JSON","stringify","ok","prevComments","filter","comment","id","handleEdit","newContent","content","Error","result","message","map","replies","updatedReplies","reply","handleCommentSubmit","e","parentId","replyText","preventDefault","commentContent","trim","tempId","Math","random","toString","substr","current","emit","alert","handleReply","handleLike","isLiked","likeCount","isLikedByCurrentUser","handleNewComment","commentExists","some","c","parentComment","handleUpdateLike","updatedComment","_updatedComment$likeC","_updatedComment$likeC2","handleEditComment","editedComment","on","off","disconnect","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","onReply","onLike","onDelete","onEdit","onSubmit","type","value","onChange","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["/Users/hyemin/Documents/Projects/cloud-native-blog/frontend/src/components/CommentSection.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport io from 'socket.io-client';\nimport CommentItem from './CommentItem';\nimport './css/Comment.css';\n\nconst CommentSection = ({ postId, user }) => {\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const userId = user?.userId || null;\n  const username = user?.username || 'Anonymous';\n  const socketRef = useRef();\n\n  const fetchComments = useCallback(async () => {\n    try {\n      const response = await fetch(`http://localhost:5000/api/comments/${postId}?userId=${userId}`);\n      const data = await response.json();\n      setComments(data);\n    } catch (error) {\n      console.error('Error fetching comments:', error);\n    }\n  }, [postId, userId]);\n\n  const handleDelete = async (commentId) => {\n    console.log(`Attempting to delete comment with ID: ${commentId}`);\n    try {\n      const response = await fetch(`http://localhost:5000/api/comments/${commentId}`, {\n        method: 'DELETE',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ userId })\n      });\n  \n      if (response.ok) {\n        setComments(prevComments => prevComments.filter(comment => comment.id !== commentId));\n      } else {\n        console.error('Failed to delete the comment');\n      }\n    } catch (error) {\n      console.error('Error deleting comment:', error);\n    }\n  };\n\n  const handleEdit = async (commentId, newContent) => {\n    try {\n      const response = await fetch(`http://localhost:5000/api/comments/${commentId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ content: newContent, userId }),\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to edit comment');\n      }\n      \n      const result = await response.json();\n      console.log(result.message);\n\n      setComments(prevComments => \n        prevComments.map(comment => {\n          if (comment.id === commentId) {\n            return { ...comment, content: newContent };\n          }\n          if (comment.replies) {\n            const updatedReplies = comment.replies.map(reply => \n              reply.id === commentId ? { ...reply, content: newContent } : reply\n            );\n            return { ...comment, replies: updatedReplies };\n          }\n          return comment;\n        })\n      );\n    } catch (error) {\n      console.error('Error editing comment:', error);\n    }\n  };\n\n  const handleCommentSubmit = (e, parentId = null, replyText = null) => {\n    e.preventDefault();\n    \n    const commentContent = replyText || newComment;\n    \n    if (commentContent.trim() && userId) {\n      const tempId = 'temp-' + Math.random().toString(36).substr(2, 9);\n\n      console.log('Submitting comment:', { postId, content: commentContent, parentId, userId, username, tempId });\n\n      socketRef.current.emit('createComment', {\n        postId,\n        content: commentContent,\n        parentId,\n        userId,\n        username,\n        tempId\n      });\n\n      if (!replyText) {\n        setNewComment('');\n      }\n    } else if (!userId) {\n      alert('Please log in to comment.');\n    }\n  };\n\n  const handleReply = (parentId, replyText) => {\n    handleCommentSubmit({ preventDefault: () => {} }, parentId, replyText);\n  };\n\n  const handleLike = (commentId, isLiked) => {\n    if (!userId) {\n      alert('Please log in to like a comment.');\n      return;\n    }\n\n    socketRef.current.emit('likeComment', { commentId, isLiked, userId });\n\n    setComments((prevComments) =>\n      prevComments.map((comment) => {\n        if (comment.id === commentId) {\n          return {\n            ...comment,\n            likeCount: isLiked ? comment.likeCount - 1 : comment.likeCount + 1,\n            isLikedByCurrentUser: !isLiked\n          };\n        }\n\n        const updatedReplies = comment.replies.map((reply) =>\n          reply.id === commentId\n            ? {\n                ...reply,\n                likeCount: isLiked ? reply.likeCount - 1 : reply.likeCount + 1,\n                isLikedByCurrentUser: !isLiked\n              }\n            : reply\n        );\n        return { ...comment, replies: updatedReplies };\n      })\n    );\n  };\n\n  useEffect(() => {\n    fetchComments();\n  \n    socketRef.current = io('http://localhost:5000');\n    socketRef.current.emit('joinPost', postId);\n  \n    const handleNewComment = (comment) => {\n      console.log('Received new comment:', comment);\n      setComments((prevComments) => {\n        const commentExists = prevComments.some(c => c.id === comment.id || c.id === comment.tempId);\n        if (commentExists) {\n          return prevComments.map(c => \n            (c.id === comment.tempId || c.id === comment.id) ? { ...comment, id: comment.id } : c\n          );\n        }\n\n        if (comment.parentId) {\n          return prevComments.map(parentComment =>\n            parentComment.id === comment.parentId\n              ? { ...parentComment, replies: [...(parentComment.replies || []), comment] }\n              : parentComment\n          );\n        }\n\n        return [...prevComments, comment];\n      });\n    };\n\n    const handleUpdateLike = (updatedComment) => {\n      setComments((prevComments) => {\n        return prevComments.map((comment) => {\n          if (comment.id === updatedComment.commentId) {\n            return { ...comment, likeCount: updatedComment.likeCount ?? 0, isLikedByCurrentUser: updatedComment.isLikedByCurrentUser };\n          }\n    \n          const updatedReplies = comment.replies.map((reply) =>\n            reply.id === updatedComment.commentId \n              ? { ...reply, likeCount: updatedComment.likeCount ?? 0, isLikedByCurrentUser: updatedComment.isLikedByCurrentUser } \n              : reply\n          );\n          return { ...comment, replies: updatedReplies };\n        });\n      });\n    };\n\n    const handleEditComment = (editedComment) => {\n      setComments(prevComments => \n        prevComments.map(comment => {\n          if (comment.id === editedComment.id) {\n            return { ...comment, ...editedComment };\n          }\n          if (comment.replies) {\n            const updatedReplies = comment.replies.map(reply => \n              reply.id === editedComment.id ? { ...reply, ...editedComment } : reply\n            );\n            return { ...comment, replies: updatedReplies };\n          }\n          return comment;\n        })\n      );\n    };\n\n    socketRef.current.on('newComment', handleNewComment);\n    socketRef.current.on('updateLike', handleUpdateLike);\n    socketRef.current.on('editComment', handleEditComment);\n    \n    return () => {\n      socketRef.current.emit('leavePost', postId);\n      socketRef.current.off('newComment', handleNewComment);\n      socketRef.current.off('updateLike', handleUpdateLike);\n      socketRef.current.off('editComment', handleEditComment);\n      socketRef.current.disconnect();\n    };\n  }, [postId, userId, fetchComments]);\n\n  return (\n    <div className=\"comment-section\">\n      <h2>Comments</h2>\n      <ul>\n        {comments.length > 0 ? (\n          comments.map((comment) => (\n            <CommentItem\n              key={comment.id}\n              comment={comment}\n              onReply={handleReply}\n              onLike={handleLike}\n              onDelete={handleDelete}\n              onEdit={handleEdit}\n              user={user}\n            />\n          ))\n        ) : (\n          <p>No comments available.</p>\n        )}\n      </ul>\n      <form onSubmit={(e) => handleCommentSubmit(e)}>\n        <input\n          type=\"text\"\n          value={newComment}\n          onChange={(e) => setNewComment(e.target.value)}\n          placeholder=\"Write a comment...\"\n          disabled={!userId}\n        />\n        <button type=\"submit\" disabled={!userId}>Post</button>\n      </form>\n    </div>\n  );\n};\n\nexport default CommentSection;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}