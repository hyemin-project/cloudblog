{"ast":null,"code":"var _jsxFileName = \"/Users/hyemin/Documents/Projects/cloud-native-blog/frontend/src/components/CommentSection.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport io from 'socket.io-client';\nimport CommentItem from './CommentItem';\nimport './css/Comment.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000');\nconst CommentSection = ({\n  postId,\n  user\n}) => {\n  _s();\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const userId = (user === null || user === void 0 ? void 0 : user.userId) || null;\n  const username = (user === null || user === void 0 ? void 0 : user.username) || 'Anonymous'; // Ensure the username is passed\n\n  // Fetch comments from the server\n  const fetchComments = useCallback(async () => {\n    try {\n      const response = await fetch(`http://localhost:5000/api/comments/${postId}?userId=${userId}`);\n      const data = await response.json();\n      const processedComments = data.map(comment => {\n        var _comment$user;\n        return {\n          ...comment,\n          likedUsers: Array.isArray(comment.likedUsers) ? comment.likedUsers : [],\n          isLikedByCurrentUser: comment.isLikedByCurrentUser,\n          likeCount: comment.likeCount || 0,\n          username: ((_comment$user = comment.user) === null || _comment$user === void 0 ? void 0 : _comment$user.username) || 'Anonymous',\n          replies: Array.isArray(comment.replies) ? comment.replies.map(reply => ({\n            ...reply,\n            likedUsers: Array.isArray(reply.likedUsers) ? reply.likedUsers : [],\n            isLikedByCurrentUser: reply.isLikedByCurrentUser,\n            likeCount: reply.likeCount || 0,\n            username: reply.username || 'Anonymous'\n          })) : []\n        };\n      });\n      setComments(processedComments);\n    } catch (error) {\n      console.error('Error fetching comments:', error);\n    }\n  }, [postId, userId]);\n\n  // Handle the deletion of a comment\n  const handleDelete = async commentId => {\n    console.log(`Attempting to delete comment with ID: ${commentId}`);\n    try {\n      const response = await fetch(`http://localhost:5000/api/comments/${commentId}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId\n        }) // Ensure userId is sent in the body\n      });\n      if (response.ok) {\n        setComments(prevComments => prevComments.filter(comment => comment.id !== commentId));\n      } else {\n        console.error('Failed to delete the comment');\n      }\n    } catch (error) {\n      console.error('Error deleting comment:', error);\n    }\n  };\n\n  // Handle submission of new comments and replies\n  const handleCommentSubmit = (e, parentId = null) => {\n    e.preventDefault();\n    if (newComment.trim()) {\n      const tempId = 'temp-' + Math.random().toString(36).substr(2, 9);\n      const newCommentData = {\n        id: tempId,\n        content: newComment,\n        userId,\n        username,\n        // Make sure username is passed with the comment\n        likeCount: 0,\n        likedUsers: [],\n        isLikedByCurrentUser: false,\n        replies: [],\n        createdAt: new Date().toISOString()\n      };\n\n      // Optimistically update the comment list before server response\n      if (parentId) {\n        setComments(prevComments => prevComments.map(comment => comment.id === parentId ? {\n          ...comment,\n          replies: [...comment.replies, newCommentData]\n        } : comment));\n      } else {\n        setComments(prevComments => [...prevComments, newCommentData]);\n      }\n\n      // Send the comment to the server via socket\n      socket.emit('createComment', {\n        postId,\n        content: newComment,\n        parentId: parentId || null,\n        userId,\n        username,\n        // Include the username when sending to server\n        tempId\n      });\n      setNewComment(''); // Clear the comment input field\n    }\n  };\n\n  // Handle replies\n  const handleReply = (parentId, replyText) => {\n    setNewComment(replyText); // Set reply as a new comment\n    handleCommentSubmit({\n      preventDefault: () => {}\n    }, parentId); // Submit reply\n  };\n\n  // Handle likes for comments and replies\n  const handleLike = (commentId, isLiked) => {\n    if (!userId) {\n      alert('Please log in to like a comment.');\n      return;\n    }\n    socket.emit('likeComment', {\n      commentId,\n      isLiked,\n      userId\n    });\n    setComments(prevComments => prevComments.map(comment => {\n      if (comment.id === commentId) {\n        return {\n          ...comment,\n          likeCount: isLiked ? comment.likeCount - 1 : comment.likeCount + 1,\n          isLikedByCurrentUser: !isLiked\n        };\n      }\n      const updatedReplies = comment.replies.map(reply => reply.id === commentId ? {\n        ...reply,\n        likeCount: isLiked ? reply.likeCount - 1 : reply.likeCount + 1,\n        isLikedByCurrentUser: !isLiked\n      } : reply);\n      return {\n        ...comment,\n        replies: updatedReplies\n      };\n    }));\n  };\n\n  // Handle incoming socket events for new comments and likes\n  useEffect(() => {\n    fetchComments();\n    socket.emit('joinPost', postId);\n    socket.on('newComment', comment => {\n      setComments(prevComments => {\n        const commentExists = prevComments.some(c => c.id === comment.id || c.id === comment.tempId);\n        if (commentExists) {\n          return prevComments.map(c => c.id === comment.tempId || c.id === comment.id ? {\n            ...comment,\n            id: comment.id\n          } : c);\n        }\n        if (comment.parentId) {\n          return prevComments.map(parentComment => parentComment.id === comment.parentId ? {\n            ...parentComment,\n            replies: [...parentComment.replies, comment]\n          } : parentComment);\n        }\n        return [...prevComments, comment];\n      });\n    });\n    socket.on('updateLike', updatedComment => {\n      setComments(prevComments => {\n        return prevComments.map(comment => {\n          if (comment.id === updatedComment.commentId) {\n            var _updatedComment$likeC;\n            return {\n              ...comment,\n              likeCount: (_updatedComment$likeC = updatedComment.likeCount) !== null && _updatedComment$likeC !== void 0 ? _updatedComment$likeC : 0,\n              isLikedByCurrentUser: updatedComment.isLikedByCurrentUser\n            };\n          }\n          const updatedReplies = comment.replies.map(reply => {\n            var _updatedComment$likeC2;\n            return reply.id === updatedComment.commentId ? {\n              ...reply,\n              likeCount: (_updatedComment$likeC2 = updatedComment.likeCount) !== null && _updatedComment$likeC2 !== void 0 ? _updatedComment$likeC2 : 0,\n              isLikedByCurrentUser: updatedComment.isLikedByCurrentUser\n            } : reply;\n          });\n          return {\n            ...comment,\n            replies: updatedReplies\n          };\n        });\n      });\n    });\n    return () => {\n      socket.emit('leavePost', postId);\n      socket.off('newComment');\n      socket.off('updateLike');\n    };\n  }, [postId, userId, fetchComments]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comment-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: comments.length > 0 ? comments.map(comment => /*#__PURE__*/_jsxDEV(CommentItem, {\n        comment: comment,\n        onReply: handleReply,\n        onLike: handleLike,\n        onDelete: handleDelete,\n        user: user\n      }, comment.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No comments available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => handleCommentSubmit(e),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newComment,\n        onChange: e => setNewComment(e.target.value),\n        placeholder: \"Write a comment...\",\n        disabled: !userId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: !userId,\n        children: \"Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 5\n  }, this);\n};\n_s(CommentSection, \"/ZSbLriEjDAF35QUbH+wKEvEjYM=\");\n_c = CommentSection;\nexport default CommentSection;\nvar _c;\n$RefreshReg$(_c, \"CommentSection\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","io","CommentItem","jsxDEV","_jsxDEV","socket","CommentSection","postId","user","_s","comments","setComments","newComment","setNewComment","userId","username","fetchComments","response","fetch","data","json","processedComments","map","comment","_comment$user","likedUsers","Array","isArray","isLikedByCurrentUser","likeCount","replies","reply","error","console","handleDelete","commentId","log","method","headers","body","JSON","stringify","ok","prevComments","filter","id","handleCommentSubmit","e","parentId","preventDefault","trim","tempId","Math","random","toString","substr","newCommentData","content","createdAt","Date","toISOString","emit","handleReply","replyText","handleLike","isLiked","alert","updatedReplies","on","commentExists","some","c","parentComment","updatedComment","_updatedComment$likeC","_updatedComment$likeC2","off","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","onReply","onLike","onDelete","onSubmit","type","value","onChange","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["/Users/hyemin/Documents/Projects/cloud-native-blog/frontend/src/components/CommentSection.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport io from 'socket.io-client';\nimport CommentItem from './CommentItem';\nimport './css/Comment.css';\n\nconst socket = io('http://localhost:5000');\n\nconst CommentSection = ({ postId, user }) => {\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const userId = user?.userId || null;\n  const username = user?.username || 'Anonymous'; // Ensure the username is passed\n\n  // Fetch comments from the server\n  const fetchComments = useCallback(async () => {\n    try {\n      const response = await fetch(`http://localhost:5000/api/comments/${postId}?userId=${userId}`);\n      const data = await response.json();\n    \n      const processedComments = data.map(comment => ({\n        ...comment,\n        likedUsers: Array.isArray(comment.likedUsers) ? comment.likedUsers : [],\n        isLikedByCurrentUser: comment.isLikedByCurrentUser,\n        likeCount: comment.likeCount || 0,\n        username: comment.user?.username || 'Anonymous',\n        replies: Array.isArray(comment.replies) ? comment.replies.map(reply => ({\n          ...reply,\n          likedUsers: Array.isArray(reply.likedUsers) ? reply.likedUsers : [],\n          isLikedByCurrentUser: reply.isLikedByCurrentUser,\n          likeCount: reply.likeCount || 0,\n          username: reply.username || 'Anonymous'\n        })) : []\n      }));\n      setComments(processedComments);\n    } catch (error) {\n      console.error('Error fetching comments:', error);\n    }\n  }, [postId, userId]);\n\n  // Handle the deletion of a comment\n  const handleDelete = async (commentId) => {\n    console.log(`Attempting to delete comment with ID: ${commentId}`); \n    try {\n      const response = await fetch(`http://localhost:5000/api/comments/${commentId}`, {\n        method: 'DELETE',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ userId }) // Ensure userId is sent in the body\n      });\n  \n      if (response.ok) {\n        setComments(prevComments => prevComments.filter(comment => comment.id !== commentId));\n      } else {\n        console.error('Failed to delete the comment');\n      }\n    } catch (error) {\n      console.error('Error deleting comment:', error);\n    }\n  };\n\n  // Handle submission of new comments and replies\n  const handleCommentSubmit = (e, parentId = null) => {\n    e.preventDefault();\n    \n    if (newComment.trim()) {\n      const tempId = 'temp-' + Math.random().toString(36).substr(2, 9);\n\n      const newCommentData = {\n        id: tempId,\n        content: newComment,\n        userId,\n        username, // Make sure username is passed with the comment\n        likeCount: 0,\n        likedUsers: [],\n        isLikedByCurrentUser: false,\n        replies: [],\n        createdAt: new Date().toISOString(),\n      };\n\n      // Optimistically update the comment list before server response\n      if (parentId) {\n        setComments(prevComments => \n          prevComments.map(comment => \n            comment.id === parentId\n              ? { ...comment, replies: [...comment.replies, newCommentData] }\n              : comment\n          )\n        );\n      } else {\n        setComments((prevComments) => [...prevComments, newCommentData]);\n      }\n\n      // Send the comment to the server via socket\n      socket.emit('createComment', {\n        postId,\n        content: newComment,\n        parentId: parentId || null,\n        userId,\n        username, // Include the username when sending to server\n        tempId\n      });\n\n      setNewComment(''); // Clear the comment input field\n    }\n  };\n\n  // Handle replies\n  const handleReply = (parentId, replyText) => {\n    setNewComment(replyText); // Set reply as a new comment\n    handleCommentSubmit({ preventDefault: () => {} }, parentId); // Submit reply\n  };\n\n  // Handle likes for comments and replies\n  const handleLike = (commentId, isLiked) => {\n    if (!userId) {\n      alert('Please log in to like a comment.');\n      return;\n    }\n\n    socket.emit('likeComment', { commentId, isLiked, userId });\n\n    setComments((prevComments) =>\n      prevComments.map((comment) => {\n        if (comment.id === commentId) {\n          return {\n            ...comment,\n            likeCount: isLiked ? comment.likeCount - 1 : comment.likeCount + 1,\n            isLikedByCurrentUser: !isLiked\n          };\n        }\n\n        const updatedReplies = comment.replies.map((reply) =>\n          reply.id === commentId\n            ? {\n                ...reply,\n                likeCount: isLiked ? reply.likeCount - 1 : reply.likeCount + 1,\n                isLikedByCurrentUser: !isLiked\n              }\n            : reply\n        );\n        return { ...comment, replies: updatedReplies };\n      })\n    );\n  };\n\n  // Handle incoming socket events for new comments and likes\n  useEffect(() => {\n    fetchComments();\n  \n    socket.emit('joinPost', postId);\n  \n    socket.on('newComment', (comment) => {\n      setComments((prevComments) => {\n        const commentExists = prevComments.some(c => c.id === comment.id || c.id === comment.tempId);\n        if (commentExists) {\n          return prevComments.map(c => \n            (c.id === comment.tempId || c.id === comment.id) ? { ...comment, id: comment.id } : c\n          );\n        }\n\n        if (comment.parentId) {\n          return prevComments.map(parentComment =>\n            parentComment.id === comment.parentId\n              ? { ...parentComment, replies: [...parentComment.replies, comment] }\n              : parentComment\n          );\n        }\n\n        return [...prevComments, comment];\n      });\n    });\n  \n    socket.on('updateLike', (updatedComment) => {\n      setComments((prevComments) => {\n        return prevComments.map((comment) => {\n          if (comment.id === updatedComment.commentId) {\n            return { ...comment, likeCount: updatedComment.likeCount ?? 0, isLikedByCurrentUser: updatedComment.isLikedByCurrentUser };\n          }\n    \n          const updatedReplies = comment.replies.map((reply) =>\n            reply.id === updatedComment.commentId \n              ? { ...reply, likeCount: updatedComment.likeCount ?? 0, isLikedByCurrentUser: updatedComment.isLikedByCurrentUser } \n              : reply\n          );\n          return { ...comment, replies: updatedReplies };\n        });\n      });\n    });\n    \n    return () => {\n      socket.emit('leavePost', postId);\n      socket.off('newComment');\n      socket.off('updateLike');\n    };\n  }, [postId, userId, fetchComments]);\n\n  return (\n    <div className=\"comment-section\">\n      <h2>Comments</h2>\n      <ul>\n        {comments.length > 0 ? (\n          comments.map((comment) => (\n            <CommentItem\n              key={comment.id}\n              comment={comment}\n              onReply={handleReply}\n              onLike={handleLike}\n              onDelete={handleDelete}\n              user={user}\n            />\n          ))\n        ) : (\n          <p>No comments available.</p>\n        )}\n      </ul>\n      <form onSubmit={(e) => handleCommentSubmit(e)}>\n        <input\n          type=\"text\"\n          value={newComment}\n          onChange={(e) => setNewComment(e.target.value)}\n          placeholder=\"Write a comment...\"\n          disabled={!userId}\n        />\n        <button type=\"submit\" disabled={!userId}>Post</button>\n      </form>\n    </div>\n  );\n};\n\nexport default CommentSection;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}