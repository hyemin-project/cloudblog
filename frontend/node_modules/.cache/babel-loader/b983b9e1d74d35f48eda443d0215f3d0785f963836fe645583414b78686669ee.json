{"ast":null,"code":"var _jsxFileName = \"/Users/hyemin/Documents/Projects/cloud-native-blog/frontend/src/components/CommentSection.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport CommentItem from './CommentItem';\nimport './css/Comment.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000');\nconst CommentSection = ({\n  postId,\n  user\n}) => {\n  _s();\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const userId = (user === null || user === void 0 ? void 0 : user.userId) || null;\n  useEffect(() => {\n    const fetchComments = async () => {\n      try {\n        const response = await fetch(`http://localhost:5000/api/comments/${postId}?userId=${userId}`);\n        const data = await response.json();\n        const processedComments = data.map(comment => ({\n          ...comment,\n          likedUsers: Array.isArray(comment.likedUsers) ? comment.likedUsers : [],\n          isLikedByCurrentUser: comment.isLikedByCurrentUser,\n          likeCount: comment.likeCount || 0,\n          username: comment.user.username,\n          replies: Array.isArray(comment.replies) ? comment.replies.map(reply => ({\n            ...reply,\n            likedUsers: Array.isArray(reply.likedUsers) ? reply.likedUsers : [],\n            isLikedByCurrentUser: reply.isLikedByCurrentUser,\n            likeCount: reply.likeCount || 0,\n            username: reply.username\n          })) : []\n        }));\n        setComments(processedComments);\n      } catch (error) {\n        console.error('Error fetching comments:', error);\n      }\n    };\n    fetchComments();\n    socket.emit('joinPost', postId);\n    socket.on('newComment', comment => {\n      setComments(prevComments => {\n        const tempId = comment.tempId;\n\n        // If the new comment has a tempId, replace the temporary comment with the real one from the server\n        if (tempId) {\n          return prevComments.map(parentComment => {\n            if (parentComment.id === tempId || parentComment.replies && parentComment.replies.some(reply => reply.id === tempId)) {\n              return {\n                ...parentComment,\n                replies: parentComment.replies.map(reply => reply.id === tempId ? comment : reply)\n              };\n            }\n            return parentComment;\n          });\n        }\n        if (comment.parentId) {\n          return prevComments.map(parentComment => parentComment.id === comment.parentId ? {\n            ...parentComment,\n            replies: [...parentComment.replies, comment]\n          } : parentComment);\n        }\n        return [...prevComments, comment];\n      });\n    });\n    socket.on('updateLike', updatedComment => {\n      setComments(prevComments => {\n        return prevComments.map(comment => {\n          if (comment.id === updatedComment.commentId) {\n            var _updatedComment$likeC;\n            return {\n              ...comment,\n              likeCount: (_updatedComment$likeC = updatedComment.likeCount) !== null && _updatedComment$likeC !== void 0 ? _updatedComment$likeC : 0\n            };\n          }\n          const updatedReplies = comment.replies.map(reply => {\n            var _updatedComment$likeC2;\n            return reply.id === updatedComment.commentId ? {\n              ...reply,\n              likeCount: (_updatedComment$likeC2 = updatedComment.likeCount) !== null && _updatedComment$likeC2 !== void 0 ? _updatedComment$likeC2 : 0\n            } : reply;\n          });\n          return {\n            ...comment,\n            replies: updatedReplies\n          };\n        });\n      });\n    });\n    return () => {\n      socket.emit('leavePost', postId);\n      socket.off('newComment');\n      socket.off('updateLike');\n    };\n  }, [postId, userId]);\n  const handleCommentSubmit = (e, parentId = null) => {\n    e.preventDefault();\n    if (newComment.trim()) {\n      const tempId = Math.random(); // Temporary ID for the comment/reply\n\n      // Optimistically add the new comment/reply with the current user's username to the state\n      setComments(prevComments => {\n        const newCommentData = {\n          id: tempId,\n          // Temporary ID, will be replaced by the server's ID\n          content: newComment,\n          userId,\n          username: user.username,\n          // Use the logged-in user's username\n          likeCount: 0,\n          likedUsers: [],\n          replies: []\n        };\n        if (parentId) {\n          return prevComments.map(parentComment => parentComment.id === parentId ? {\n            ...parentComment,\n            replies: [...parentComment.replies, newCommentData]\n          } : parentComment);\n        } else {\n          return [...prevComments, newCommentData];\n        }\n      });\n\n      // Emit the new comment to the server via socket\n      socket.emit('createComment', {\n        postId,\n        content: newComment,\n        parentId: parentId || null,\n        userId\n      }, realComment => {\n        // Update the optimistic comment with the real comment from the server\n        setComments(prevComments => {\n          const updatedComments = prevComments.map(comment => {\n            if (comment.id === tempId) {\n              // Replace optimistic comment with the real comment\n              return {\n                ...realComment,\n                replies: comment.replies\n              }; // Keep replies as they are\n            }\n            if (comment.replies && comment.replies.length > 0) {\n              const updatedReplies = comment.replies.map(reply => reply.id === tempId ? {\n                ...realComment,\n                replies: reply.replies\n              } : reply);\n              return {\n                ...comment,\n                replies: updatedReplies\n              };\n            }\n            return comment;\n          });\n          return updatedComments;\n        });\n      });\n      setNewComment(''); // Clear input field after submission\n    }\n  };\n  const handleReply = (parentId, replyText) => {\n    if (replyText.trim()) {\n      const tempId = Math.random();\n      socket.emit('createComment', {\n        postId,\n        content: replyText,\n        parentId,\n        userId,\n        tempId // Send the tempId with the reply data\n      });\n      setComments(prevComments => {\n        const newReplyData = {\n          id: tempId,\n          // Temporary ID\n          content: replyText,\n          userId,\n          username: user.username,\n          likeCount: 0,\n          likedUsers: [],\n          replies: []\n        };\n        return prevComments.map(parentComment => parentComment.id === parentId ? {\n          ...parentComment,\n          replies: [...parentComment.replies, newReplyData]\n        } : parentComment);\n      });\n    }\n  };\n  const handleLike = (commentId, isLiked) => {\n    if (!userId) {\n      alert('Please log in to like a comment.');\n      return;\n    }\n    socket.emit('likeComment', {\n      commentId,\n      isLiked,\n      userId\n    });\n    setComments(prevComments => prevComments.map(comment => {\n      if (comment.id === commentId) {\n        return {\n          ...comment,\n          likeCount: isLiked ? comment.likeCount - 1 : comment.likeCount + 1,\n          likedUsers: isLiked ? comment.likedUsers.filter(id => id !== userId) : [...comment.likedUsers, userId],\n          isLikedByCurrentUser: !isLiked\n        };\n      }\n      const updatedReplies = comment.replies.map(reply => reply.id === commentId ? {\n        ...reply,\n        likeCount: isLiked ? reply.likeCount - 1 : reply.likeCount + 1,\n        likedUsers: isLiked ? reply.likedUsers.filter(id => id !== userId) : [...reply.likedUsers, userId],\n        isLikedByCurrentUser: !isLiked\n      } : reply);\n      return {\n        ...comment,\n        replies: updatedReplies\n      };\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comment-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: comments.length > 0 ? comments.map((comment, index) => /*#__PURE__*/_jsxDEV(CommentItem, {\n        comment: comment,\n        onReply: handleReply,\n        onLike: handleLike,\n        user: user\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No comments available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleCommentSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newComment,\n        onChange: e => setNewComment(e.target.value),\n        placeholder: \"Write a comment...\",\n        disabled: !userId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: !userId,\n        children: \"Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 227,\n    columnNumber: 5\n  }, this);\n};\n_s(CommentSection, \"MxCDS9ewhkO9e8lz5YjyzEXdntQ=\");\n_c = CommentSection;\nexport default CommentSection;\nvar _c;\n$RefreshReg$(_c, \"CommentSection\");","map":{"version":3,"names":["React","useState","useEffect","io","CommentItem","jsxDEV","_jsxDEV","socket","CommentSection","postId","user","_s","comments","setComments","newComment","setNewComment","userId","fetchComments","response","fetch","data","json","processedComments","map","comment","likedUsers","Array","isArray","isLikedByCurrentUser","likeCount","username","replies","reply","error","console","emit","on","prevComments","tempId","parentComment","id","some","parentId","updatedComment","commentId","_updatedComment$likeC","updatedReplies","_updatedComment$likeC2","off","handleCommentSubmit","e","preventDefault","trim","Math","random","newCommentData","content","realComment","updatedComments","length","handleReply","replyText","newReplyData","handleLike","isLiked","alert","filter","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","onReply","onLike","onSubmit","type","value","onChange","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["/Users/hyemin/Documents/Projects/cloud-native-blog/frontend/src/components/CommentSection.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport CommentItem from './CommentItem';\nimport './css/Comment.css';\n\nconst socket = io('http://localhost:5000');\n\nconst CommentSection = ({ postId, user }) => {\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const userId = user?.userId || null;\n\n  useEffect(() => {\n    const fetchComments = async () => {\n      try {\n        const response = await fetch(`http://localhost:5000/api/comments/${postId}?userId=${userId}`);\n        const data = await response.json();\n    \n        const processedComments = data.map(comment => ({\n          ...comment,\n          likedUsers: Array.isArray(comment.likedUsers) ? comment.likedUsers : [],\n          isLikedByCurrentUser: comment.isLikedByCurrentUser,\n          likeCount: comment.likeCount || 0,\n          username: comment.user.username,\n          replies: Array.isArray(comment.replies) ? comment.replies.map(reply => ({\n            ...reply,\n            likedUsers: Array.isArray(reply.likedUsers) ? reply.likedUsers : [],\n            isLikedByCurrentUser: reply.isLikedByCurrentUser,\n            likeCount: reply.likeCount || 0,\n            username: reply.username\n          })) : []\n        }));\n        setComments(processedComments);\n      } catch (error) {\n        console.error('Error fetching comments:', error);\n      }\n    };\n\n    fetchComments();\n  \n    socket.emit('joinPost', postId);\n  \n    socket.on('newComment', (comment) => {\n      setComments((prevComments) => {\n        const tempId = comment.tempId;\n\n        // If the new comment has a tempId, replace the temporary comment with the real one from the server\n        if (tempId) {\n          return prevComments.map(parentComment => {\n            if (parentComment.id === tempId || (parentComment.replies && parentComment.replies.some(reply => reply.id === tempId))) {\n              return {\n                ...parentComment,\n                replies: parentComment.replies.map(reply => reply.id === tempId ? comment : reply),\n              };\n            }\n            return parentComment;\n          });\n        }\n\n        if (comment.parentId) {\n          return prevComments.map(parentComment =>\n            parentComment.id === comment.parentId\n              ? { ...parentComment, replies: [...parentComment.replies, comment] }\n              : parentComment\n          );\n        }\n        return [...prevComments, comment];\n      });\n    });\n  \n    socket.on('updateLike', (updatedComment) => {\n      setComments((prevComments) => {\n        return prevComments.map((comment) => {\n          if (comment.id === updatedComment.commentId) {\n            return { ...comment, likeCount: updatedComment.likeCount ?? 0 };\n          }\n    \n          const updatedReplies = comment.replies.map((reply) =>\n            reply.id === updatedComment.commentId ? { ...reply, likeCount: updatedComment.likeCount ?? 0 } : reply\n          );\n          return { ...comment, replies: updatedReplies };\n        });\n      });\n    });\n    \n    return () => {\n      socket.emit('leavePost', postId);\n      socket.off('newComment');\n      socket.off('updateLike');\n    };\n  }, [postId, userId]);\n\n  const handleCommentSubmit = (e, parentId = null) => {\n    e.preventDefault();\n    \n    if (newComment.trim()) {\n      const tempId = Math.random(); // Temporary ID for the comment/reply\n\n      // Optimistically add the new comment/reply with the current user's username to the state\n      setComments(prevComments => {\n        const newCommentData = {\n          id: tempId, // Temporary ID, will be replaced by the server's ID\n          content: newComment,\n          userId,\n          username: user.username, // Use the logged-in user's username\n          likeCount: 0,\n          likedUsers: [],\n          replies: [],\n        };\n\n        if (parentId) {\n          return prevComments.map(parentComment =>\n            parentComment.id === parentId\n              ? { ...parentComment, replies: [...parentComment.replies, newCommentData] }\n              : parentComment\n          );\n        } else {\n          return [...prevComments, newCommentData];\n        }\n      });\n\n      // Emit the new comment to the server via socket\n      socket.emit('createComment', {\n        postId,\n        content: newComment,\n        parentId: parentId || null,\n        userId\n      }, (realComment) => {\n        // Update the optimistic comment with the real comment from the server\n        setComments(prevComments => {\n          const updatedComments = prevComments.map(comment => {\n            if (comment.id === tempId) {\n              // Replace optimistic comment with the real comment\n              return { ...realComment, replies: comment.replies }; // Keep replies as they are\n            }\n\n            if (comment.replies && comment.replies.length > 0) {\n              const updatedReplies = comment.replies.map(reply =>\n                reply.id === tempId ? { ...realComment, replies: reply.replies } : reply\n              );\n              return { ...comment, replies: updatedReplies };\n            }\n\n            return comment;\n          });\n\n          return updatedComments;\n        });\n      });\n\n      setNewComment(''); // Clear input field after submission\n    }\n  };\n\n\n  const handleReply = (parentId, replyText) => {\n    if (replyText.trim()) {\n      const tempId = Math.random();\n      \n      socket.emit('createComment', {\n        postId,\n        content: replyText,\n        parentId,\n        userId,\n        tempId  // Send the tempId with the reply data\n      });\n\n      setComments(prevComments => {\n        const newReplyData = {\n          id: tempId, // Temporary ID\n          content: replyText,\n          userId,\n          username: user.username,\n          likeCount: 0,\n          likedUsers: [],\n          replies: []\n        };\n\n        return prevComments.map(parentComment =>\n          parentComment.id === parentId\n            ? { ...parentComment, replies: [...parentComment.replies, newReplyData] }\n            : parentComment\n        );\n      });\n    }\n  };\n\n  const handleLike = (commentId, isLiked) => {\n    if (!userId) {\n      alert('Please log in to like a comment.');\n      return;\n    }\n\n    socket.emit('likeComment', { commentId, isLiked, userId });\n\n    setComments((prevComments) =>\n      prevComments.map((comment) => {\n        if (comment.id === commentId) {\n          return {\n            ...comment,\n            likeCount: isLiked ? comment.likeCount - 1 : comment.likeCount + 1,\n            likedUsers: isLiked\n              ? comment.likedUsers.filter((id) => id !== userId)\n              : [...comment.likedUsers, userId],\n            isLikedByCurrentUser: !isLiked\n          };\n        }\n\n        const updatedReplies = comment.replies.map((reply) =>\n          reply.id === commentId\n            ? {\n                ...reply,\n                likeCount: isLiked ? reply.likeCount - 1 : reply.likeCount + 1,\n                likedUsers: isLiked\n                  ? reply.likedUsers.filter((id) => id !== userId)\n                  : [...reply.likedUsers, userId],\n                isLikedByCurrentUser: !isLiked\n              }\n            : reply\n        );\n        return { ...comment, replies: updatedReplies };\n      })\n    );\n  };\n\n  return (\n    <div className=\"comment-section\">\n      <h2>Comments</h2>\n      <ul>\n        {comments.length > 0 ? (\n          comments.map((comment, index) => (\n            <CommentItem\n              key={index}\n              comment={comment}\n              onReply={handleReply}\n              onLike={handleLike}\n              user={user}\n            />\n          ))\n        ) : (\n          <p>No comments available.</p>\n        )}\n      </ul>\n      <form onSubmit={handleCommentSubmit}>\n        <input\n          type=\"text\"\n          value={newComment}\n          onChange={(e) => setNewComment(e.target.value)}\n          placeholder=\"Write a comment...\"\n          disabled={!userId}\n        />\n        <button type=\"submit\" disabled={!userId}>Post</button>\n      </form>\n    </div>\n  );\n};\n\nexport default CommentSection;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}