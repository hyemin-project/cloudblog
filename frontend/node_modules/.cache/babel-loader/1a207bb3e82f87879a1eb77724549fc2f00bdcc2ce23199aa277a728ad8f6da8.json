{"ast":null,"code":"var _jsxFileName = \"/Users/hyemin/Documents/Projects/cloud-native-blog/frontend/src/components/CommentSection.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport CommentItem from './CommentItem';\nimport './css/Comment.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000');\nconst CommentSection = ({\n  postId,\n  user\n}) => {\n  _s();\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n\n  // Extract userId from the user object\n  const userId = (user === null || user === void 0 ? void 0 : user.userId) || null; // Ensure userId is obtained correctly\n\n  useEffect(() => {\n    console.log(userId);\n    const fetchComments = async () => {\n      try {\n        // Pass userId as a query parameter when fetching comments\n        const response = await fetch(`http://localhost:5000/api/comments/${postId}?userId=${userId}`);\n        const data = await response.json();\n        console.log('Fetched data:', data); // Log the fetched data\n\n        // Process each comment to include like status and count\n        const processedComments = data.map(comment => ({\n          ...comment,\n          likedUsers: Array.isArray(comment.likedUsers) ? comment.likedUsers : [],\n          isLikedByCurrentUser: comment.isLikedByCurrentUser,\n          likeCount: comment.likeCount || 0,\n          // Ensure likeCount is available\n          username: comment.user.username,\n          replies: Array.isArray(comment.replies) ? comment.replies.map(reply => ({\n            ...reply,\n            likedUsers: Array.isArray(reply.likedUsers) ? reply.likedUsers : [],\n            isLikedByCurrentUser: reply.isLikedByCurrentUser,\n            likeCount: reply.likeCount || 0,\n            // Ensure likeCount for replies\n            username: reply.username\n          })) : []\n        }));\n        setComments(processedComments);\n      } catch (error) {\n        console.error('Error fetching comments:', error);\n      }\n    };\n\n    // Fetch the comments as soon as the component mounts\n    fetchComments();\n    socket.emit('joinPost', postId);\n    socket.on('newComment', comment => {\n      comment.likedUsers = Array.isArray(comment.likedUsers) ? comment.likedUsers : [];\n      setComments(prevComments => {\n        if (comment.parentId) {\n          return prevComments.map(parentComment => parentComment.id === comment.parentId ? {\n            ...parentComment,\n            replies: [...parentComment.replies, comment]\n          } : parentComment);\n        }\n        return [...prevComments, comment];\n      });\n    });\n    socket.on('updateLike', updatedComment => {\n      console.log('Received updated like count from server:', updatedComment); // Add this log\n\n      setComments(prevComments => {\n        return prevComments.map(comment => {\n          if (comment.id === updatedComment.commentId) {\n            var _updatedComment$likeC;\n            return {\n              ...comment,\n              likeCount: (_updatedComment$likeC = updatedComment.likeCount) !== null && _updatedComment$likeC !== void 0 ? _updatedComment$likeC : 0\n            }; // Ensure likeCount is updated\n          }\n          const updatedReplies = comment.replies.map(reply => {\n            var _updatedComment$likeC2;\n            return reply.id === updatedComment.commentId ? {\n              ...reply,\n              likeCount: (_updatedComment$likeC2 = updatedComment.likeCount) !== null && _updatedComment$likeC2 !== void 0 ? _updatedComment$likeC2 : 0\n            } : reply;\n          });\n          return {\n            ...comment,\n            replies: updatedReplies\n          };\n        });\n      });\n    });\n    return () => {\n      socket.emit('leavePost', postId);\n      socket.off('newComment');\n      socket.off('updateLike');\n    };\n  }, [postId, userId]);\n  const handleCommentSubmit = (e, parentId = null) => {\n    e.preventDefault();\n    if (newComment.trim()) {\n      const tempId = Math.random(); // Temporary ID for the comment/reply\n\n      // Emit the new comment to the server via socket\n      socket.emit('createComment', {\n        postId,\n        content: newComment,\n        parentId: parentId || null,\n        userId\n      });\n\n      // Optimistically add the new comment/reply with the current user's username to the state\n      setComments(prevComments => {\n        const newCommentData = {\n          id: tempId,\n          // Temporary ID, will be replaced by the server's ID\n          content: newComment,\n          userId,\n          username: user.username,\n          // Use the logged-in user's username\n          likeCount: 0,\n          likedUsers: [],\n          replies: []\n        };\n        if (parentId) {\n          return prevComments.map(parentComment => parentComment.id === parentId ? {\n            ...parentComment,\n            replies: [...parentComment.replies, newCommentData]\n          } : parentComment);\n        } else {\n          return [...prevComments, newCommentData];\n        }\n      });\n      setNewComment(''); // Clear input field after submission\n    }\n  };\n  const handleReply = (parentId, replyText) => {\n    if (replyText.trim()) {\n      const tempId = Math.random(); // Temporary ID for the reply\n\n      // Emit the reply to the server via socket\n      socket.emit('createComment', {\n        postId,\n        content: replyText,\n        parentId,\n        userId\n      });\n\n      // Optimistically add the reply to the comment with the current user's username\n      setComments(prevComments => {\n        const newReplyData = {\n          id: tempId,\n          // Temporary ID, will be replaced by the server's ID\n          content: replyText,\n          userId,\n          username: user.username,\n          // Use the logged-in user's username\n          likeCount: 0,\n          likedUsers: [],\n          replies: []\n        };\n        return prevComments.map(parentComment => parentComment.id === parentId ? {\n          ...parentComment,\n          replies: [...parentComment.replies, newReplyData]\n        } : parentComment);\n      });\n    }\n  };\n  const handleLike = (commentId, isLiked) => {\n    if (!userId) {\n      alert('Please log in to like a comment.');\n      return;\n    }\n    socket.emit('likeComment', {\n      commentId,\n      isLiked,\n      userId\n    });\n    console.log(`Emitted likeComment: commentId=${commentId}, isLiked=${isLiked}, userId=${userId}`);\n\n    // Optimistic UI update\n    setComments(prevComments => prevComments.map(comment => {\n      if (comment.id === commentId) {\n        return {\n          ...comment,\n          likeCount: isLiked ? comment.likeCount - 1 : comment.likeCount + 1,\n          likedUsers: isLiked ? comment.likedUsers.filter(id => id !== userId) : [...comment.likedUsers, userId],\n          isLikedByCurrentUser: !isLiked\n        };\n      }\n      const updatedReplies = comment.replies.map(reply => reply.id === commentId ? {\n        ...reply,\n        likeCount: isLiked ? reply.likeCount - 1 : reply.likeCount + 1,\n        likedUsers: isLiked ? reply.likedUsers.filter(id => id !== userId) : [...reply.likedUsers, userId],\n        isLikedByCurrentUser: !isLiked\n      } : reply);\n      return {\n        ...comment,\n        replies: updatedReplies\n      };\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comment-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: comments.length > 0 ? comments.map((comment, index) => /*#__PURE__*/_jsxDEV(CommentItem, {\n        comment: comment,\n        onReply: handleReply,\n        onLike: handleLike,\n        user: user\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No comments available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleCommentSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newComment,\n        onChange: e => setNewComment(e.target.value),\n        placeholder: \"Write a comment...\",\n        disabled: !userId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: !userId,\n        children: \"Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n};\n_s(CommentSection, \"MxCDS9ewhkO9e8lz5YjyzEXdntQ=\");\n_c = CommentSection;\nexport default CommentSection;\nvar _c;\n$RefreshReg$(_c, \"CommentSection\");","map":{"version":3,"names":["React","useState","useEffect","io","CommentItem","jsxDEV","_jsxDEV","socket","CommentSection","postId","user","_s","comments","setComments","newComment","setNewComment","userId","console","log","fetchComments","response","fetch","data","json","processedComments","map","comment","likedUsers","Array","isArray","isLikedByCurrentUser","likeCount","username","replies","reply","error","emit","on","prevComments","parentId","parentComment","id","updatedComment","commentId","_updatedComment$likeC","updatedReplies","_updatedComment$likeC2","off","handleCommentSubmit","e","preventDefault","trim","tempId","Math","random","content","newCommentData","handleReply","replyText","newReplyData","handleLike","isLiked","alert","filter","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","index","onReply","onLike","onSubmit","type","value","onChange","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["/Users/hyemin/Documents/Projects/cloud-native-blog/frontend/src/components/CommentSection.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport CommentItem from './CommentItem';\nimport './css/Comment.css';\n\nconst socket = io('http://localhost:5000');\n\nconst CommentSection = ({ postId, user }) => {\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n\n  // Extract userId from the user object\n  const userId = user?.userId || null;  // Ensure userId is obtained correctly\n\n  useEffect(() => {\n    console.log(userId);\n    const fetchComments = async () => {\n      try {\n        // Pass userId as a query parameter when fetching comments\n        const response = await fetch(`http://localhost:5000/api/comments/${postId}?userId=${userId}`);\n        const data = await response.json();\n        console.log('Fetched data:', data); // Log the fetched data\n    \n        // Process each comment to include like status and count\n        const processedComments = data.map(comment => ({\n          ...comment,\n          likedUsers: Array.isArray(comment.likedUsers) ? comment.likedUsers : [],\n          isLikedByCurrentUser: comment.isLikedByCurrentUser,\n          likeCount: comment.likeCount || 0, // Ensure likeCount is available\n          username: comment.user.username,\n          replies: Array.isArray(comment.replies) ? comment.replies.map(reply => ({\n            ...reply,\n            likedUsers: Array.isArray(reply.likedUsers) ? reply.likedUsers : [],\n            isLikedByCurrentUser: reply.isLikedByCurrentUser,\n            likeCount: reply.likeCount || 0 ,// Ensure likeCount for replies\n            username : reply.username\n          })) : []\n        }));\n        setComments(processedComments);\n      } catch (error) {\n        console.error('Error fetching comments:', error);\n      }\n    };\n\n    // Fetch the comments as soon as the component mounts\n    fetchComments();\n  \n    socket.emit('joinPost', postId);\n  \n    socket.on('newComment', (comment) => {\n      comment.likedUsers = Array.isArray(comment.likedUsers) ? comment.likedUsers : [];\n  \n      setComments((prevComments) => {\n        if (comment.parentId) {\n          return prevComments.map(parentComment =>\n            parentComment.id === comment.parentId\n              ? { ...parentComment, replies: [...parentComment.replies, comment] }\n              : parentComment\n          );\n        }\n        return [...prevComments, comment];\n      });\n    });\n  \n    socket.on('updateLike', (updatedComment) => {\n      console.log('Received updated like count from server:', updatedComment); // Add this log\n    \n      setComments((prevComments) => {\n        return prevComments.map((comment) => {\n          if (comment.id === updatedComment.commentId) {\n            return { ...comment, likeCount: updatedComment.likeCount ?? 0 }; // Ensure likeCount is updated\n          }\n    \n          const updatedReplies = comment.replies.map((reply) =>\n            reply.id === updatedComment.commentId ? { ...reply, likeCount: updatedComment.likeCount ?? 0 } : reply\n          );\n          return { ...comment, replies: updatedReplies };\n        });\n      });\n    });\n    \n    return () => {\n      socket.emit('leavePost', postId);\n      socket.off('newComment');\n      socket.off('updateLike');\n    };\n  }, [postId, userId]);\n  \n  const handleCommentSubmit = (e, parentId = null) => {\n    e.preventDefault();\n    \n    if (newComment.trim()) {\n      const tempId = Math.random(); // Temporary ID for the comment/reply\n      \n      // Emit the new comment to the server via socket\n      socket.emit('createComment', {\n        postId,\n        content: newComment,\n        parentId: parentId || null,\n        userId\n      });\n      \n      // Optimistically add the new comment/reply with the current user's username to the state\n      setComments(prevComments => {\n        const newCommentData = {\n          id: tempId, // Temporary ID, will be replaced by the server's ID\n          content: newComment,\n          userId,\n          username: user.username, // Use the logged-in user's username\n          likeCount: 0,\n          likedUsers: [],\n          replies: [],\n        };\n  \n        if (parentId) {\n          return prevComments.map(parentComment =>\n            parentComment.id === parentId\n              ? { ...parentComment, replies: [...parentComment.replies, newCommentData] }\n              : parentComment\n          );\n        } else {\n          return [...prevComments, newCommentData];\n        }\n      });\n      \n      setNewComment(''); // Clear input field after submission\n    }\n  };\n  \n  const handleReply = (parentId, replyText) => {\n    if (replyText.trim()) {\n      const tempId = Math.random(); // Temporary ID for the reply\n      \n      // Emit the reply to the server via socket\n      socket.emit('createComment', {\n        postId,\n        content: replyText,\n        parentId,\n        userId\n      });\n  \n      // Optimistically add the reply to the comment with the current user's username\n      setComments(prevComments => {\n        const newReplyData = {\n          id: tempId, // Temporary ID, will be replaced by the server's ID\n          content: replyText,\n          userId,\n          username: user.username, // Use the logged-in user's username\n          likeCount: 0,\n          likedUsers: [],\n          replies: []\n        };\n  \n        return prevComments.map(parentComment =>\n          parentComment.id === parentId\n            ? { ...parentComment, replies: [...parentComment.replies, newReplyData] }\n            : parentComment\n        );\n      });\n    }\n  };\n  \n\n  const handleLike = (commentId, isLiked) => {\n    if (!userId) {\n      alert('Please log in to like a comment.');\n      return;\n    }\n\n    socket.emit('likeComment', { commentId, isLiked, userId });\n    console.log(`Emitted likeComment: commentId=${commentId}, isLiked=${isLiked}, userId=${userId}`);\n\n    // Optimistic UI update\n    setComments((prevComments) =>\n      prevComments.map((comment) => {\n        if (comment.id === commentId) {\n          return {\n            ...comment,\n            likeCount: isLiked ? comment.likeCount - 1 : comment.likeCount + 1,\n            likedUsers: isLiked\n              ? comment.likedUsers.filter((id) => id !== userId)\n              : [...comment.likedUsers, userId],\n            isLikedByCurrentUser: !isLiked\n          };\n        }\n\n        const updatedReplies = comment.replies.map((reply) =>\n          reply.id === commentId\n            ? {\n                ...reply,\n                likeCount: isLiked ? reply.likeCount - 1 : reply.likeCount + 1,\n                likedUsers: isLiked\n                  ? reply.likedUsers.filter((id) => id !== userId)\n                  : [...reply.likedUsers, userId],\n                isLikedByCurrentUser: !isLiked\n              }\n            : reply\n        );\n        return { ...comment, replies: updatedReplies };\n      })\n    );\n  };\n\n  return (\n    <div className=\"comment-section\">\n      <h2>Comments</h2>\n      <ul>\n        {comments.length > 0 ? (\n          comments.map((comment, index) => (\n            <CommentItem\n              key={index}\n              comment={comment}\n              onReply={handleReply}\n              onLike={handleLike}\n              user={user}\n            />\n          ))\n        ) : (\n          <p>No comments available.</p>\n        )}\n      </ul>\n      <form onSubmit={handleCommentSubmit}>\n        <input\n          type=\"text\"\n          value={newComment}\n          onChange={(e) => setNewComment(e.target.value)}\n          placeholder=\"Write a comment...\"\n          disabled={!userId}\n        />\n        <button type=\"submit\" disabled={!userId}>Post</button>\n      </form>\n    </div>\n  );\n};\n\nexport default CommentSection;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}