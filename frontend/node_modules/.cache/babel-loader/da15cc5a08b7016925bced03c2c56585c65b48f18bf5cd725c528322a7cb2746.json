{"ast":null,"code":"var _jsxFileName = \"/Users/hyemin/Documents/Projects/cloud-native-blog/frontend/src/components/CommentSection.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport CommentItem from './CommentItem';\nimport './css/Comment.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000');\nconst CommentSection = ({\n  postId,\n  user\n}) => {\n  _s();\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const userId = (user === null || user === void 0 ? void 0 : user.userId) || null;\n  useEffect(() => {\n    const fetchComments = async () => {\n      // ... (기존 코드 유지)\n    };\n    fetchComments();\n    socket.emit('joinPost', postId);\n    socket.on('newComment', comment => {\n      setComments(prevComments => {\n        // 이미 존재하는 댓글인지 확인\n        const commentExists = prevComments.some(c => c.id === comment.id);\n        if (commentExists) {\n          return prevComments;\n        }\n\n        // 임시 ID로 추가된 댓글 교체\n        if (comment.tempId) {\n          return prevComments.map(c => c.id === comment.tempId ? {\n            ...comment,\n            id: comment.id\n          } : c);\n        }\n\n        // 새 댓글 추가\n        return [...prevComments, comment];\n      });\n    });\n    socket.on('updateLike', updatedComment => {\n      // ... (기존 코드 유지)\n    });\n    return () => {\n      socket.emit('leavePost', postId);\n      socket.off('newComment');\n      socket.off('updateLike');\n    };\n  }, [postId, userId]);\n  const handleCommentSubmit = (e, parentId = null) => {\n    e.preventDefault();\n    if (newComment.trim()) {\n      const tempId = 'temp-' + Math.random().toString(36).substr(2, 9);\n      const newCommentData = {\n        id: tempId,\n        content: newComment,\n        userId,\n        username: user.username,\n        likeCount: 0,\n        likedUsers: [],\n        replies: [],\n        createdAt: new Date().toISOString()\n      };\n      setComments(prevComments => [...prevComments, newCommentData]);\n      socket.emit('createComment', {\n        postId,\n        content: newComment,\n        parentId: parentId || null,\n        userId,\n        tempId\n      });\n      setNewComment('');\n    }\n  };\n\n  // ... (나머지 코드 유지)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comment-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: comments.length > 0 ? comments.map(comment => /*#__PURE__*/_jsxDEV(CommentItem, {\n        comment: comment,\n        onReply: handleReply,\n        onLike: handleLike,\n        user: user\n      }, comment.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No comments available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleCommentSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newComment,\n        onChange: e => setNewComment(e.target.value),\n        placeholder: \"Write a comment...\",\n        disabled: !userId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: !userId,\n        children: \"Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s(CommentSection, \"MxCDS9ewhkO9e8lz5YjyzEXdntQ=\");\n_c = CommentSection;\nexport default CommentSection;\nvar _c;\n$RefreshReg$(_c, \"CommentSection\");","map":{"version":3,"names":["React","useState","useEffect","io","CommentItem","jsxDEV","_jsxDEV","socket","CommentSection","postId","user","_s","comments","setComments","newComment","setNewComment","userId","fetchComments","emit","on","comment","prevComments","commentExists","some","c","id","tempId","map","updatedComment","off","handleCommentSubmit","e","parentId","preventDefault","trim","Math","random","toString","substr","newCommentData","content","username","likeCount","likedUsers","replies","createdAt","Date","toISOString","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","onReply","handleReply","onLike","handleLike","onSubmit","type","value","onChange","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["/Users/hyemin/Documents/Projects/cloud-native-blog/frontend/src/components/CommentSection.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport CommentItem from './CommentItem';\nimport './css/Comment.css';\n\nconst socket = io('http://localhost:5000');\n\nconst CommentSection = ({ postId, user }) => {\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const userId = user?.userId || null;\n\n  useEffect(() => {\n    const fetchComments = async () => {\n      // ... (기존 코드 유지)\n    };\n\n    fetchComments();\n  \n    socket.emit('joinPost', postId);\n  \n    socket.on('newComment', (comment) => {\n      setComments((prevComments) => {\n        // 이미 존재하는 댓글인지 확인\n        const commentExists = prevComments.some(c => c.id === comment.id);\n        if (commentExists) {\n          return prevComments;\n        }\n\n        // 임시 ID로 추가된 댓글 교체\n        if (comment.tempId) {\n          return prevComments.map(c => \n            c.id === comment.tempId ? { ...comment, id: comment.id } : c\n          );\n        }\n\n        // 새 댓글 추가\n        return [...prevComments, comment];\n      });\n    });\n  \n    socket.on('updateLike', (updatedComment) => {\n      // ... (기존 코드 유지)\n    });\n    \n    return () => {\n      socket.emit('leavePost', postId);\n      socket.off('newComment');\n      socket.off('updateLike');\n    };\n  }, [postId, userId]);\n\n  const handleCommentSubmit = (e, parentId = null) => {\n    e.preventDefault();\n    \n    if (newComment.trim()) {\n      const tempId = 'temp-' + Math.random().toString(36).substr(2, 9);\n\n      const newCommentData = {\n        id: tempId,\n        content: newComment,\n        userId,\n        username: user.username,\n        likeCount: 0,\n        likedUsers: [],\n        replies: [],\n        createdAt: new Date().toISOString(),\n      };\n\n      setComments(prevComments => [...prevComments, newCommentData]);\n\n      socket.emit('createComment', {\n        postId,\n        content: newComment,\n        parentId: parentId || null,\n        userId,\n        tempId\n      });\n\n      setNewComment('');\n    }\n  };\n\n  // ... (나머지 코드 유지)\n\n  return (\n    <div className=\"comment-section\">\n      <h2>Comments</h2>\n      <ul>\n        {comments.length > 0 ? (\n          comments.map((comment) => (\n            <CommentItem\n              key={comment.id}\n              comment={comment}\n              onReply={handleReply}\n              onLike={handleLike}\n              user={user}\n            />\n          ))\n        ) : (\n          <p>No comments available.</p>\n        )}\n      </ul>\n      <form onSubmit={handleCommentSubmit}>\n        <input\n          type=\"text\"\n          value={newComment}\n          onChange={(e) => setNewComment(e.target.value)}\n          placeholder=\"Write a comment...\"\n          disabled={!userId}\n        />\n        <button type=\"submit\" disabled={!userId}>Post</button>\n      </form>\n    </div>\n  );\n};\n\nexport default CommentSection;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,EAAE,MAAM,kBAAkB;AACjC,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,MAAM,GAAGJ,EAAE,CAAC,uBAAuB,CAAC;AAE1C,MAAMK,cAAc,GAAGA,CAAC;EAAEC,MAAM;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAC3C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACa,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAMe,MAAM,GAAG,CAAAN,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEM,MAAM,KAAI,IAAI;EAEnCd,SAAS,CAAC,MAAM;IACd,MAAMe,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC;IAAA,CACD;IAEDA,aAAa,CAAC,CAAC;IAEfV,MAAM,CAACW,IAAI,CAAC,UAAU,EAAET,MAAM,CAAC;IAE/BF,MAAM,CAACY,EAAE,CAAC,YAAY,EAAGC,OAAO,IAAK;MACnCP,WAAW,CAAEQ,YAAY,IAAK;QAC5B;QACA,MAAMC,aAAa,GAAGD,YAAY,CAACE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKL,OAAO,CAACK,EAAE,CAAC;QACjE,IAAIH,aAAa,EAAE;UACjB,OAAOD,YAAY;QACrB;;QAEA;QACA,IAAID,OAAO,CAACM,MAAM,EAAE;UAClB,OAAOL,YAAY,CAACM,GAAG,CAACH,CAAC,IACvBA,CAAC,CAACC,EAAE,KAAKL,OAAO,CAACM,MAAM,GAAG;YAAE,GAAGN,OAAO;YAAEK,EAAE,EAAEL,OAAO,CAACK;UAAG,CAAC,GAAGD,CAC7D,CAAC;QACH;;QAEA;QACA,OAAO,CAAC,GAAGH,YAAY,EAAED,OAAO,CAAC;MACnC,CAAC,CAAC;IACJ,CAAC,CAAC;IAEFb,MAAM,CAACY,EAAE,CAAC,YAAY,EAAGS,cAAc,IAAK;MAC1C;IAAA,CACD,CAAC;IAEF,OAAO,MAAM;MACXrB,MAAM,CAACW,IAAI,CAAC,WAAW,EAAET,MAAM,CAAC;MAChCF,MAAM,CAACsB,GAAG,CAAC,YAAY,CAAC;MACxBtB,MAAM,CAACsB,GAAG,CAAC,YAAY,CAAC;IAC1B,CAAC;EACH,CAAC,EAAE,CAACpB,MAAM,EAAEO,MAAM,CAAC,CAAC;EAEpB,MAAMc,mBAAmB,GAAGA,CAACC,CAAC,EAAEC,QAAQ,GAAG,IAAI,KAAK;IAClDD,CAAC,CAACE,cAAc,CAAC,CAAC;IAElB,IAAInB,UAAU,CAACoB,IAAI,CAAC,CAAC,EAAE;MACrB,MAAMR,MAAM,GAAG,OAAO,GAAGS,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;MAEhE,MAAMC,cAAc,GAAG;QACrBd,EAAE,EAAEC,MAAM;QACVc,OAAO,EAAE1B,UAAU;QACnBE,MAAM;QACNyB,QAAQ,EAAE/B,IAAI,CAAC+B,QAAQ;QACvBC,SAAS,EAAE,CAAC;QACZC,UAAU,EAAE,EAAE;QACdC,OAAO,EAAE,EAAE;QACXC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC;MAEDlC,WAAW,CAACQ,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAEkB,cAAc,CAAC,CAAC;MAE9DhC,MAAM,CAACW,IAAI,CAAC,eAAe,EAAE;QAC3BT,MAAM;QACN+B,OAAO,EAAE1B,UAAU;QACnBkB,QAAQ,EAAEA,QAAQ,IAAI,IAAI;QAC1BhB,MAAM;QACNU;MACF,CAAC,CAAC;MAEFX,aAAa,CAAC,EAAE,CAAC;IACnB;EACF,CAAC;;EAED;;EAEA,oBACET,OAAA;IAAK0C,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC9B3C,OAAA;MAAA2C,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjB/C,OAAA;MAAA2C,QAAA,EACGrC,QAAQ,CAAC0C,MAAM,GAAG,CAAC,GAClB1C,QAAQ,CAACe,GAAG,CAAEP,OAAO,iBACnBd,OAAA,CAACF,WAAW;QAEVgB,OAAO,EAAEA,OAAQ;QACjBmC,OAAO,EAAEC,WAAY;QACrBC,MAAM,EAAEC,UAAW;QACnBhD,IAAI,EAAEA;MAAK,GAJNU,OAAO,CAACK,EAAE;QAAAyB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKhB,CACF,CAAC,gBAEF/C,OAAA;QAAA2C,QAAA,EAAG;MAAsB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAC7B;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACL/C,OAAA;MAAMqD,QAAQ,EAAE7B,mBAAoB;MAAAmB,QAAA,gBAClC3C,OAAA;QACEsD,IAAI,EAAC,MAAM;QACXC,KAAK,EAAE/C,UAAW;QAClBgD,QAAQ,EAAG/B,CAAC,IAAKhB,aAAa,CAACgB,CAAC,CAACgC,MAAM,CAACF,KAAK,CAAE;QAC/CG,WAAW,EAAC,oBAAoB;QAChCC,QAAQ,EAAE,CAACjD;MAAO;QAAAkC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnB,CAAC,eACF/C,OAAA;QAAQsD,IAAI,EAAC,QAAQ;QAACK,QAAQ,EAAE,CAACjD,MAAO;QAAAiC,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV,CAAC;AAAC1C,EAAA,CA5GIH,cAAc;AAAA0D,EAAA,GAAd1D,cAAc;AA8GpB,eAAeA,cAAc;AAAC,IAAA0D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}